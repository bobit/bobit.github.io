{"meta":{"title":"Bobit-你好世界","subtitle":"做一个有心人，总结经验和教训。#副标题","description":"你好世界，Hello World！","author":"Bobit","url":"https://bobit.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":false,"path":"/404.html","permalink":"https://bobit.github.io//404.html","excerpt":"","text":"1234567891011121314151617181920212223242526/** * Whoops, we can&apos;t find that page. * 佛祖也没找到页面，请去看看其他吧 * * _______________ * _ooOoo_ / | * o8888888o / 404 Not Found | * 88&quot; . &quot;88 / ________________| * (| -_- |) /_/ * O\\ = /O * ____/`---&apos;\\____ * .&apos; \\\\| |// `. * / \\\\||| : |||// \\ * / _||||| -:- |||||- \\ * | | \\\\\\ - /// | | * | \\_| &apos;&apos;\\---/&apos;&apos; | | * \\ .-\\__ `-` ___/-. / * ___`. .&apos; /--.--\\ `. . __ * .&quot;&quot; &apos;&lt; `.___\\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;. * | | : `- \\`.;`\\ _ /`;.`/ - ` : | | * \\ \\ `-. \\_ __\\ /__ _/ .-` / / * ======`-.____`-.___\\_____/___.-`____.-&apos;====== * `=---=&apos; * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ * */"},{"title":"关于","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":false,"path":"about/index.html","permalink":"https://bobit.github.io/about/index.html","excerpt":"","text":"做一个工作和生活中的有心人，及时总结经验和教训。"},{"title":"书单","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":false,"path":"books/index.html","permalink":"https://bobit.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":false,"path":"categories/index.html","permalink":"https://bobit.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"gitbooks/README.html","permalink":"https://bobit.github.io/gitbooks/README.html","excerpt":"","text":"个人点滴记忆 涉及编程语言、设计模式、架构、安全、大数据、分布式、人工智能、区块链、工具等等，持续更新中…"},{"title":"","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"gitbooks/SUMMARY.html","permalink":"https://bobit.github.io/gitbooks/SUMMARY.html","excerpt":"","text":"Summary 前言 Algorithms English Interview 0.Java高级面试题 1.并发编程 2.性能优化 3.源码分析 4.分布式 5.微服务 6.数据库 7.敏捷 8.Linux 9.项目实战-vipkid面试题 Linux Setting 并发编程 分布式 人工智能 团队协作 微服务 性能优化 源码分析 Life 0-12个月宝宝每月注意事项 宝宝晚上睡不安的原因 驾车好习惯终身受用 健康美味饺子 科学合理“坐月子”的10条建议 判断车距 汽车暴晒后如何降温 汽车上高速前检查事项 坐月子可以吃什么水果 开发文档列表"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/introduction.html","permalink":"https://bobit.github.io/gitbooks/introduction.html","excerpt":"","text":"前言"},{"title":"友情链接","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"links/index.html","permalink":"https://bobit.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":false,"path":"repository/index.html","permalink":"https://bobit.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":false,"path":"tags/index.html","permalink":"https://bobit.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/Algorithms.html","permalink":"https://bobit.github.io/gitbooks/categories/Algorithms.html","excerpt":"","text":"生活相关"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/English.html","permalink":"https://bobit.github.io/gitbooks/categories/English.html","excerpt":"","text":"英语相关"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/Interview.html","permalink":"https://bobit.github.io/gitbooks/categories/Interview.html","excerpt":"","text":"面试相关 1.个人价值观与成就 2.Java基础面试选择题 3.Java高级面试题 4.数据库 5.缓存 6.并发编程 7.敏捷开发相关 8.数据结构与算法 9.Linux面试题 10.设计模式与重构"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/Life.html","permalink":"https://bobit.github.io/gitbooks/categories/Life.html","excerpt":"","text":"生活相关"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/Linux.html","permalink":"https://bobit.github.io/gitbooks/categories/Linux.html","excerpt":"","text":"Linux相关"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/Setting.html","permalink":"https://bobit.github.io/gitbooks/categories/Setting.html","excerpt":"","text":"工具相关"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/人工智能.html","permalink":"https://bobit.github.io/gitbooks/categories/人工智能.html","excerpt":"","text":"人工智能"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/分布式.html","permalink":"https://bobit.github.io/gitbooks/categories/分布式.html","excerpt":"","text":"分布式"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/团队协作.html","permalink":"https://bobit.github.io/gitbooks/categories/团队协作.html","excerpt":"","text":"团队协作"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/并发编程.html","permalink":"https://bobit.github.io/gitbooks/categories/并发编程.html","excerpt":"","text":"并发编程"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/微服务.html","permalink":"https://bobit.github.io/gitbooks/categories/微服务.html","excerpt":"","text":"微服务"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/性能优化.html","permalink":"https://bobit.github.io/gitbooks/categories/性能优化.html","excerpt":"","text":"性能优化"},{"title":"","date":"2019-08-30T02:02:24.066Z","updated":"2019-08-30T02:02:24.066Z","comments":true,"path":"gitbooks/categories/源码分析.html","permalink":"https://bobit.github.io/gitbooks/categories/源码分析.html","excerpt":"","text":"源码分析"}],"posts":[{"title":"Git使用方法详解","slug":"Setting/Git","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/695dd287.html","link":"","permalink":"https://bobit.github.io/posts/695dd287.html","excerpt":"","text":"参考 https://help.github.com/en/articles/removing-sensitive-data-from-a-repository 管理工具 https://git-scm.com/download/gui/windows git-scm https://gitforwindows.org/ TortoiseGit GitHub Desktop SmartGit 命令 查看、添加、提交、删除、找回，重置修改文件 1234567891011121314151617181920212223242526272829git help &lt;command&gt; # 显示command的help git show # 显示某次提交的内容 git show $id git co -- &lt;file&gt; # 抛弃工作区修改 git co . # 抛弃工作区修改 git add &lt;file&gt; # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm &lt;file&gt; # 从版本库中删除文件 git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件 git reset &lt;file&gt; # 从暂存区恢复到工作文件 git reset -- . # 从暂存区恢复到工作文件 git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git ci -am &quot;some comments&quot; git ci --amend # 修改最后一次提交记录 git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象 git revert HEAD # 恢复最后一次提交的状态 1234567891011121314151617181920212223242526272829 查看文件diff 1234567891011121314151617181920212223242526272829git help &lt;command&gt; # 显示command的help git show # 显示某次提交的内容 git show $id git co -- &lt;file&gt; # 抛弃工作区修改 git co . # 抛弃工作区修改 git add &lt;file&gt; # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm &lt;file&gt; # 从版本库中删除文件 git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件 git reset &lt;file&gt; # 从暂存区恢复到工作文件 git reset -- . # 从暂存区恢复到工作文件 git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git ci -am &quot;some comments&quot; git ci --amend # 修改最后一次提交记录 git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象 git revert HEAD # 恢复最后一次提交的状态 1234567891011121314151617181920212223242526272829 查看提交记录 1234567891011git log git log &lt;file&gt; # 查看该文件每次提交记录 git log -p &lt;file&gt; # 查看每次详细修改内容的diff git log -p -2 # 查看最近两次详细修改内容的diff git log --stat #查看提交统计信息 tigMac上可以使用tig代替diff和log，brew install tig1234567891011 Git 本地分支管理 查看、切换、创建和删除分支 1234567891011121314151617181920212223git br -r # 查看远程分支 git br &lt;new_branch&gt; # 创建新的分支 git br -v # 查看各个分支最后提交信息 git br --merged # 查看已经被合并到当前分支的分支 git br --no-merged # 查看尚未被合并到当前分支的分支 git co &lt;branch&gt; # 切换到某个分支 git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去 git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支 git br -d &lt;branch&gt; # 删除某个分支 git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 1234567891011121314151617181920212223 分支合并和reba 12345git merge &lt;branch&gt; # 将branch分支合并到当前分支 git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交 git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt; 12345 Git补丁管理(方便在多台机器上开发同步时用) 12345git merge &lt;branch&gt; # 将branch分支合并到当前分支 git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交 git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt; 12345 Git暂存管 12345678git stash # 暂存 git stash list # 列所有stash git stash apply # 恢复暂存的内容 git stash drop # 删除暂存区 12345678 Git远程分支管理 1234567891011git pull # 抓取远程仓库所有分支更新并合并到本地 git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin # 抓取远程仓库更新 git merge origin/master # 将远程主分支合并到本地当前分支 git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支 git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上 1234567891011 git push # push所有分支 123456789git push origin master # 将本地主分支推到远程主分支 git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名 git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支 git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支 123456789 Git远程仓库管 1234567git remote -v # 查看远程服务器地址和仓库名称 git remote show origin # 查看远程服务器仓库状态 git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址 git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库 1234567 创建远程仓库 12345678910111213git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库 git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址 git push -u origin master # 客户端首次提交 git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track git remote set-head origin master # 设置远程仓库的HEAD指向master分支 12345678910111213 也可以命令设置跟踪远程库和本地库 123git branch --set-upstream master origin/master git branch --set-upstream develop origin/develop 常用 1234567891011git status 查看未被传送到远程代码库的提交状态git add . #把修改的文件添加至暂存区git commit -m “说明文字” #在本地将暂存区内容提交git push -u origin master #将本地推送到远端git fetch origin mastergit pull origin master #从远程库拉回版本git pull = git fetch + git mergegit cherry -v 查看未被传送到远程代码库的提交描述和说明git reset commit_id 撤销未被传送到远程代码库的提交 初始化 123456789101112131415161718git init 初始化仓库,新建一个Git仓库(新建了一个隐藏目录.git) 把远程仓库克隆到本地git clone git@github.com:lioilwin/lioilwin.github.io.gitgit clone git@git.coding.net:lifec/lioilwin.git把本地仓库关联到远程仓库git remote add github git@github.com:lioilwin/lioilwin.github.io.gitgit remote add coding git@git.coding.net:lifec/lioilwin.git远程仓库别名如果git clone一个远程仓库, Git会自动添加url,别名为origingit remote 列出远程仓库别名 git remote -v 远程仓库别名对应的实际urlgit remote add [alias] [url] 添加一个新远程仓库git remote rm [alias] 删除远程仓库别名git remote rename [old-alias] [new-alias] 重命名git remote set-url [alias] [url] 更改url,可以加上—push和fetch参数,为同一个别名set不同地址 日志/回滚重置 12345678910111213141516171819202122232425262728293031323334353637383940git log --name-only --oneline fileNamegit log --oneline --number 每条log只显示一行,显示number条git log --oneline --graph 图形化显示分支合并历史git log branchname 显示特定分支git log --decorategit log --author=[author name] 指定作者的提交历史.git log --since --before --until --after 根据提交时间筛选git log --grep 根据commit信息过滤git log --stat 改动信息 git reflog reflog记录分支变化或者HEAD引用变化, 当git reflog不指定引用时, 默认列出HEAD的reflog, HEAD@&#123;0&#125;代表HEAD当前的值, HEAD@&#123;3&#125;代表HEAD在3次变化之前的值, git会将变化记录到HEAD对应的reflog文件中, 其路径为.git/logs/HEAD, 分支reflog文件都放在.git/logs/refs的子目录git show commitIDgit diff 不加参数: show diff of unstaged changes. git diff --cached 命令 已经暂存的文件和上次提交之间的差异 git diff HEAD show diff of all staged or unstated changes. git checkout commitID fileNamegit revertgit reset --hardgit分为三个区域: 1.工作区(working directry) 2.暂缓区(stage index) 3.历史记录区(history) git reset --mixed id history变了(提交记录变了),但staged 和 working没变 (默认方式)git reset --soft id history变了(提交记录变了)和staged区都变了,但working没变git reset --hard id 全都变了变化范围:soft (history) &lt; mixed (history + stage) &lt; hard (history + stage + working) 分支 1234567891011git branch -v 每一个分支的最后一次提交.git branch 列出本地所有分支,当前分支会被星号标示出 git branch mybranch 创建分支git branch -D mybranch 删除分支 git checkout mybranch 切换分支git checkout -b mybranch 创建并切换分支git rebase master 把master分支更新到当前分支git merge mybranch 分支合并git push [remote-name] :branch-name 删除远程分支 彻底清除垃圾文件(缩减git仓库) 12345678910111213141516# 清除垃圾文件(pdf)git filter-branch --force --index-filter &apos;git rm --cached --ignore-unmatch *.pdf&apos; --prune-empty --tag-name-filter cat -- --all# 提交到远程仓库(如GitHub, 我再次从git clone GitHub代码库会变小为1.3M)git push origin --force --all# 必须回收垃圾,本地仓库才变小git for-each-ref --format=&apos;delete %(refname)&apos; refs/original | git update-ref --stdin git reflog expire --expire=now --allgit gc --prune=nowrm -rf .git/refs/originalgit reflog expire --expire=now --allgit gc --prune=nowgit gc --aggressive --prune=now","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://bobit.github.io/tags/Git/"}]},{"title":"Gitbook使用方法详解","slug":"Setting/Gitbook","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/338d75c8.html","link":"","permalink":"https://bobit.github.io/posts/338d75c8.html","excerpt":"","text":"因为喜欢使用 Markdown 和 GitHub ，使用GitBook进行博客总结是个不错的选择 。 主题 目前 gitbook 提供三类文档: Book 文档,API 文档和 FAQ 文档. 其中默认default主题插件的也是最常使用的就是 Book 文档,适合一般的博客类网站或静态网站,api 主题插件适合接口文档的编写,faq 主题插件则适合帮助中心. 安装命令行工具 npm install gitbook-cli -g 初始化项目 gitbook init 生成 执行下面命令，就可以将电子书的内容制作成静态网页，并保存在 _book 目录中。 1$ gitbook build 本地预览 gitbook serve http://localhost:4000/ GitBook 将启动一个 Web 服务，监听在本地的 4000 端口上。（同时会新增一个 _book 目录），在浏览器其中访问地址就可以实时预览电子书 生成pdf 结合 GitHub Pages GitHub Pages 是 GitHub 提供的静态网站托管服务。 GitHub 上的每个仓库都可以拥有一个 GitHub Pages，对应的 URL 如下： 1https://&lt;username&gt;.github.io/&lt;repository&gt;/ GitHub Pages 的静态资源支持下面 3 个来源： master 分支 master 分支的 /docs 目录 gh-pages 分支 执行下面命令，将 _book 目录推送到 GitHub 仓库的 gh-pages 分支。 1$ git subtree push --prefix=_book origin gh-pages 或者在生成静态网页时，将保存的目录指定为 ./docs 1$ gitbook build ./ ./docs 然后直接推送到 GitHub 仓库的。 1$ git push origin master 参考 https://www.gitbook.com/ https://plugins.gitbook.com/ https://help.gitbook.com/ https://plugins.gitbook.com/plugin/search-jieba GitBook 使用 用 GitHub + GitBook 发布一本新书","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Gitbook","slug":"Gitbook","permalink":"https://bobit.github.io/tags/Gitbook/"}]},{"title":"Github使用方法详解","slug":"Setting/Github","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/d18dc8d0.html","link":"","permalink":"https://bobit.github.io/posts/d18dc8d0.html","excerpt":"","text":"可以托管自己的项目源码外，还可以Watch（关注）、Star（加星）、Fork（复制一份）、Pull Request（提交问题或申请功能）其他开发者的项目。 第三方登录 登录方式的流程： A 网站跳转到 Github 的授权页面。 Github 授权页面询问用户：“是否允许A网站获取下列权限”，用户点击“允许”，取得授权码。 Github 授权页面重定向回 A 网站，同时在URL 上带上授权码。 A 网站通过 URL 上的授权码往 Github 取回 Token。 A 网站使用这个 Token 去调用 Github API。 Token 项目管理模式——Projects Issues Github 中传统的项目管理是使用 issue 和 pull request 进行的，这部分内容不是本文重点，不再赘述。 但有一些功能需要提及： Tag： 每个 issue 可以添加不同的 tag，可以用于标记 issue 的种类和 issue 的处理进度； MileStone：每个 issue 只属于一个 milestone，用于显示 issue 的处理进度。 Projects Projects 提供了真正的管理 issue 的能力；而传统的 tag 方式只能以手工的方式管理分类（如 Q&amp;A，bug，duplicate，feature 这些标签🏷），或者以手工的方式管理 issue 进度（need test, in progress, wait approval 等这些标签）。 看板（Kanban） 所谓看板，就是把一块木板上分成几列，然后在每一列上贴上不同内容的卡片。 木板上的这几列一般是有顺序的，卡片可以在不同的列之间移动来表明所处的状态。 部署到Github 使用免费的站点 和 GitBook 生成的文档一样，我们可以直接把文档网站部署到 GitHub Pages 或者 VPS 上 GitHub Pages GitHub Pages 支持从三个地方读取文件 docs/ 目录 master 分支 gh-pages 分支 上传文件至Github仓库 官方推荐直接将文档放在 docs/ 目录下，在设置页面开启 GitHub Pages 功能并选择 master branch /docs folder 选项。 自定义域名 域名绑定是需要“双方配置”的。 Github配置 （1）在github的github pages的仓库根目录里加上CNAME文件，里面写上个人域名即可。我的是： 1zhangbo.fun （2）或者直接在github.io仓库的Settings的GitHub Pages项直接设置Custom domain,github会自动添加CNAME文件。 域名解析配置 首先找到域名管理，选择域名解析功能。 记录类型仅仅添加两个CNAME类型即可，不需要管A类型，或者IP CNAME类型： 主机记录www和@是为了 www.example.com 和 example.com 都能访问到你的页面 private的仓库改成public Github打造个人文档-GitHub Pages Github打造个人文档-docsify 工具 docsify 推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。 安装 npm i docsify-cli -g 初始化项目 docsify init ./docs 初始化成功后，可以看到 ./docs 目录下创建的几个文件 123index.html 入口文件README.md 会做为主页内容渲染.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件 预览 docsify serve docs http://localhost:3000 WIKI Wiki 是一种在网络上开放且可供多人协同创作的超文本系统 本地预览 我们在本地手动编辑编辑完成后，只能通过 push 到 GitHub 的方式进行预览，非常不方便，这个时候，就需要借助一个叫 gollum 的工具了。 Gollum 是 GitHub 上用到的 Wiki 引擎，使用它可以在本地上搭建一个类似的GitHub Wiki 的网站，对本地的 Wiki 页面进行快速预览。执行以下命令即可安装： 1234567891011121314151617181920212223242526272829303132333435363738sudo gem install gollumRuby25-x64安装失败F:\\Projects\\demo-rabbitmq\\rabbitmq.wiki&gt;gem install gollumTemporarily enhancing PATH for MSYS/MINGW...Building native extensions. This could take a while...ERROR: Error installing gollum: ERROR: Failed to build gem native extension. current directory: D:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/charlock_holmes-0.7.6/ext/charlock_holmesD:/Ruby25-x64/bin/ruby.exe -r ./siteconf20190828-19448-1rx7ayt.rb extconf.rbwhich: no make in (/d/Ruby25-x64/bin:/mingw64/bin:/usr/bin:/d/Ruby25-x64/bin:/d/Program Files/VanDyke Software/Clients:/c/ProgramData/DockerDesktop/version-bin:/c/Program Files/Docker/Docker/Resources/bin:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/d/Program Files/TortoiseGit/bin:/d/DevTools/apache-maven-3.6.1/bin:/d/Program Files/Java/jdk1.8.0_144/bin:/d/Program Files/Java/jdk1.8.0_144/jre/bin:/d/Program Files/Git/bin:/d/DevTools/mysql/bin:/d/DevTools/rabbitmq_server-3.7.17/sbin:/d/Program Files/nodejs:/d/chocolatey/bin:/d/HashiCorp/Vagrant/bin:/d/ProgramData/Anaconda3:/d/ProgramData/Anaconda3/Scripts:/d/ProgramData/Anaconda3/Library/bin:/d/DevTools/mongodb-win32-x86_64-2012plus-4.2.0/bin:/d/Program Files/Mercurial:/d/Program Files/nodejs/node_global:/f/Projects/demo-golang/bin:/d/Go/bin:/f/Projects/demo-golang/bin:/d/Program Files/erl10.4/bin:/d/Program Files/Git LFS:/c/Users/zhangb/AppData/Local/Microsoft/WindowsApps:/c/Users/zhangb/AppData/Roaming/npm:/c/Users/zhangb/AppData/Local/Programs/Microsoft VS Code/bin:/c/Users/zhangb/AppData/Local/GitHubDesktop/bin)****************************************************************************************************** make required (apt-get install make build-essential) =( ********************************************************************************************************* extconf.rb failed ***Could not create Makefile due to some reason, probably lack of necessarylibraries and/or headers. Check the mkmf.log file for more details. You mayneed configuration options.Provided configuration options: --with-opt-dir --without-opt-dir --with-opt-include --without-opt-include=$&#123;opt-dir&#125;/include --with-opt-lib --without-opt-lib=$&#123;opt-dir&#125;/lib --with-make-prog --without-make-prog --srcdir=. --curdir --ruby=D:/Ruby25-x64/bin/$(RUBY_BASE_NAME)extconf failed, exit code 1Gem files will remain installed in D:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/charlock_holmes-0.7.6 for inspection.Results logged to D:/Ruby25-x64/lib/ruby/gems/2.5.0/extensions/x64-mingw32/2.5.0/charlock_holmes-0.7.6/gem_make.out 安装完成后，将路径切换到 Wiki 的 Git 仓库下然后执行 gollum 命令，然后访问 http://127.0.0.1:4567/ 即可进行预览。 图床 参考 https://docsify.js.org/#/zh-cn/quickstart http://www.imooc.com/article/291424","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://bobit.github.io/tags/Github/"}]},{"title":"","slug":"Setting/Gradle","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/0.html","link":"","permalink":"https://bobit.github.io/posts/0.html","excerpt":"","text":"12345678title: Gradletypora-copy-images-to: ../../gitbooks/static/images/toc: truemathjax: truedate: 2017-08-28 12:25:30abbrlink:tags:categories: 缓存路径修改 设置方法 ​ 1、设置MAVEN的仓库位置，修改maven安装目录\\conf\\settings.xml,增加如下内容： 1&lt;localRepository&gt;D:\\localRepoGradle&lt;/localRepository&gt; ​ 2、设置gradle本地仓库位置（和MAVEN共用），打开系统环境变量，增加如下内容： 1变量名: GRADLE_USER_HOME变量值：D:\\localRepoGradle ​ 3、设置gradle发布到本地库的方法: 1将maven的配置文件settings.xml移到USER_HOME/.m2目录下","categories":[],"tags":[]},{"title":"Lombok使用方法详解","slug":"Setting/Lombok","date":"2019-08-30T02:02:24.062Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/196eb970.html","link":"","permalink":"https://bobit.github.io/posts/196eb970.html","excerpt":"","text":"背景 在面向对象编程中因为定义的业务模型对象比较多，需要重复写Getter/Setter、构造器方法、字符串输出的ToString方法和Equals/HashCode方法等。现在使用Lombok工具把我们需要重复劳作的事给解决掉，使代码变得简洁跟优雅。 参考 https://projectlombok.org/features/all IDEA 中集成Lombok 插件 并使用Lombok简化代码 安装Lombok插件 IDEA中添加Lombok插件, File -&gt; Setting -&gt; Plugins 搜索Lombok Plugin， 点击install，安装完成后重启IDEA 使用Lombok简化代码 只需要每个属性一行代码就行 12345678910@Datapublic class OrderItem implements Serializable &#123; private Long id; private Integer num; private BigDecimal unitPrice; private BigDecimal paymentPrice; private Long orderId;&#125; Lombok注解 1234567891011121314151617181920val：用在局部变量前面，相当于将变量声明为final@NonNull：给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出NPE（NullPointerException）@Cleanup：自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码来关闭流@Getter/@Setter：用在属性上，再也不用自己手写setter和getter方法了，还可以指定访问范围@ToString：用在类上，可以自动覆写toString方法，当然还可以加其他参数，例如@ToString(exclude=”id”)排除id属性，或者@ToString(callSuper=true, includeFieldNames=true)调用父类的toString方法，包含所有属性@EqualsAndHashCode：用在类上，自动生成equals方法和hashCode方法@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有@NonNull属性作为参数的构造函数，如果指定staticName = “of”参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多@Data：注解在类上，相当于同时使用了@ToString、@EqualsAndHashCode、@Getter、@Setter和@RequiredArgsConstrutor这些注解，对于POJO类十分有用@Value：用在类上，是@Data的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法@Builder：用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用Person.builder().name(&quot;Adam Savage&quot;).city(&quot;San Francisco&quot;).job(&quot;Mythbusters&quot;).job(&quot;Unchained Reaction&quot;).build();更多说明参考Builder@SneakyThrows：自动抛受检异常，而无需显式在方法上使用throws语句@Synchronized：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性$lock或$LOCK，而java中的synchronized关键字锁对象是this，锁在this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误@Getter(lazy=true)：可以替代经典的Double Check Lock样板代码@Log：根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类@CommonsLog Creates log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);@Log Creates log = java.util.logging.Logger.getLogger(LogExample.class.getName());@Log4j Creates log = org.apache.log4j.Logger.getLogger(LogExample.class);@Log4j2 Creates log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);@Slf4j Creates log = org.slf4j.LoggerFactory.getLogger(LogExample.class);@XSlf4j Creates log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Lombok","slug":"Lombok","permalink":"https://bobit.github.io/tags/Lombok/"}]},{"title":"Travis系列:自动化部署项目","slug":"Setting/Travis","date":"2019-08-28T03:25:30.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/b1a2c01.html","link":"","permalink":"https://bobit.github.io/posts/b1a2c01.html","excerpt":"","text":"自动化部署 SpringBoot applications using Travis-CI Vue applications using Travis-CI python applications using Travis-CI 参考 https://docs.travis-ci.com/user/tutorial/ https://docs.travis-ci.com/user/sonarcloud/","categories":[],"tags":[]},{"title":"程序员心灵鸡汤","slug":"English/程序员心灵鸡汤","date":"2018-06-06T01:00:10.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/a51546ce.html","link":"","permalink":"https://bobit.github.io/posts/a51546ce.html","excerpt":"","text":"Never give up until the last seconds. 朝九晚五会磨圆你的棱角，让你越滚越远，安稳的碌碌无为。 You never know what you can do till you try. 除非你亲自尝试一下，否则你永远不知道你能够做什么。 常态化的努力，才是真努力。 除了吃喝拉撒，工作是我生活的全部。 在我的公式里：成就 = 天赋 × 运气 × 努力。其中，只有努力是我们唯一能掌控的东西。 天地不仁以万物为刍狗，这才符合世界运行的规律。 好钢是由铁炼成的 一名好的程序员必须经过千锤百炼才行 挫折是程序员最大的宝,要能承受挫折,战胜挫折,只有不断经受挫折,从挫折中吸取经验,教训,这样你才能成为真正的程序员. 人的爱心是很有限度和条件的，而人的不满和憎恶确是与日剧增的。 人总是害怕输，而其实“赢”字“亡口月贝凡”和起来就是“闭上嘴每个月拿点钱过平凡的生活”。 大多数人没法面对的是比你100个不及的同志都混得不错！后来我才发现人和人不要比！最后不舒服的还是你自己。 升迁是人唯一成功的标志。 经济比所谓的技术重要还好学！ 技术95%情况对于人们一生职业的进步都没有太大用，所谓的研发工程师都是一些很好笑干活的头衔，其实没有什么实质的社会地位和经济价值地位。之所以学生们追求它其实也是表面的。 人际工程其实是所有专业魁首。我没有看到过一个真正踏踏实实搞技术的有很大成就！ 人的社会关系比你的学位重要 程序员高手是怎样炼成的？ *出处：*www.vchome.net 作者：阿蒙 阅读提示：本文列出了程序员成为高手的必要条件，包括：迷恋+热情、在项目中磨练与成长、数不胜数的加班、正确的学习方法、失败—&gt;打击—&gt;努力—&gt;成功—&gt;成就感、敢想+能说+会写、善于利用各种资源和细节决定高手。您同意作者的观点吗？ 1**．** 迷恋 + 热情 程序员是一种有点乏味有点枯燥有点辛苦的技术工作，要能坚持下去，并能做得很好，没有迷恋没有热情是很难很难的，偶就很迷恋，迷恋C++，迷恋computer，迷恋network，偶迷恋for、if、while、case等等就如同歌手迷恋五线谱的小蝌蚪一样，我觉得程序代码真是无所不能，简简单单的几行代码就能实现丰富多彩的功能，你难道不觉得很NB吗？ 2**．** 在项目中磨练与成长 项目是有周期的，有周期就有压力，有压力才能不分昼夜地去学习与实现，学习的效果也会很显著与深刻。 3**．** 数不胜数的加班 偶这里所讲的加班并不单指工作上的OT（即overtime），而更多的是学习上的OT，偶认为程序员学习的黄金时间在毕业后的前三年，这三年你如果有一个好的环境好的团队好的上司，再加上你的勤奋努力，三年后你将有一个质的飞跃。 4**．** 正确的学习方法 作为老一辈的程序员，我们有幸学过与写过很多纯windows的程序，我依然记得当年用vc++1.5写的程序，都是用SDK，要写的代码很多很多，那是个美好的年代，我怀念它。 5**．** 失败**—&gt;打击—&gt;努力—&gt;成功—&gt;**成就感 奉劝各位程序员如果你暂时遇到挫折与失败，不要灰心丧气，不要退缩，而要奋起直追，学好了，以后再去骂其它的初级程序员，呵呵，开玩笑的。 6**．** 敢想**+能说+**会写 中国的教育体制造就了太多太多的五好青年，循规蹈矩，逆来顺受，前怕狼后怕虎，缺乏创新意识，这个社会什么都不缺，就缺敢想敢做的人。 能说对于程序员来讲，确实是要求过高，但如果你想走上较高的层次，偶认为这一点是很重要的，因此我们需要寻找各种各样的机会来锻炼这方面的能力。 会写就是能写出漂亮的方案文档，能针对不同的客户写出不同的文档，比如技术文档，商务文档，销售文档等。 7**．** 善于利用各种资源 8**．** 细节决定高手 老子说了：天下难事，必做于易。 具体点说：就是写好每一份注释，在提交文档之前要一而再再而三地检查，代码要简洁干净，每一个算法都要高效，把胡子剃干净，别扣错钮扣，穿整洁的衣服，讲话注意文明礼貌，红灯停绿灯行，不随地丢垃圾…呵呵，离题了。 分享一下从老板身上偷学的东西 来源：www.21icbbs.com 同僚|校友|老乡会 作者：sillboy 低调做人，踏实做事 我认识的老板们做人低调，但做事情很踏实，一步一个脚印。在企业的经营管理中，从不好大喜功，实事求是，稳扎稳打。因为老板不喜张扬，哪怕是生意不好时做调整，一个项目或关或停，都只有圈内人知道，不会在社会上闹得沸沸扬扬，搞得政府、媒体、客户、银行都来找你麻烦。老板们的低调，源于他们对社会环境的深刻认识，体现了他们精明的生存策略。 亲和力就是魅力 如果你和我一样从事过销售，对于向陌生人做推销所碰到的冰冷面孔一定难于忘记。但我不论是在企业里跟着老板做事，还是做业务时直接和老板们打交道，很多老板都很有亲和力，不会因为你只是一个业务员，就拒人于千里之外。不少老板都平易近人，不摆架子，比他们手下的一些主管容易接近。向他们推销一些业务，生意成功的机会都比较小，但大老板们会抽出时间来接待你，听你讲讲产品。在企业里做事，老板也并不会板着一张脸，哪怕对一个扫地阿姨都会笑脸相待。有一次在一家大型外资企业做事，董事长五年才来一次中国，在欢迎晚宴结束的时候，董事长说希望能和每一位员工握手。有时老板还会在一些生活上的事规劝员工。有一位主管喜欢赌钱，老板对他说：“不要赌，没什么意思的，我年轻的时候也赌过。” 很多老板都是从事业务出身的，因此，他们的亲和力是在长期的商海生涯中培养起来的。哪怕是一个小小的业务员，老板们也没有必要对你推三阻四而落下个不好的名声。生意人的和气生财，老板们是体会最深的。 老板告诉你：什么是“执行” 几年前我在一家电脑公司打工，公司的老板在当地赫赫有名，旗下有多家公司，其中有一家是酒店。晚上12点，老板亲自开车跑到电脑公司，说是要做一个菜单，明天早市就要用。于是，晚上的一二点，我们跑去老板的朋友处借高像素的彩色打印机，凌晨三四点找到仓管拿到过胶机，早上六点多钟客人来喝早茶时，菜单已经放摆在每个餐桌上了，而老板和我们一样彻夜未眠，全程督战。成功的老板，做起事来都是雷厉风行，甚至连他们平时走路，都会比别人节奏快。 细节决定成败 老板们都是做大事的人，但他们对于小细节照样很重视，甚至比手下的人更细心。刚开始时进一家公司时，我把做的方案或设计稿给老板过目，但老板把我写错的标点符号和电话号码都圈出来了，让我感到汗颜。一个营业员开错了单，会计和财务都没有发现，还是老板看出来了。老板们事情多，应酬多，但在日常的经营管理中，并不放过任何细小的疏忽。 沉稳如山 曾听说一个大老板，年终时资金紧张，背地里到处找人借钱发工资，但在员工面前却笑嘻嘻的说保险箱里都是钱。另一位我认识的老板，公司处于困难时期，连自己汽车加油的钱都没有，但在公司里却照样谈笑风生，不紧不慢地与大家泡功夫茶喝。没有足够的风险承受能力，是难于在商场上成就大事的。想一想一些普通员工，稍微碰上点困难，就惊慌失措，手忙脚乱。他们在这一点上，是要好好地向老板多学学。 令我们感动和警醒的六段话 一、《洛可菲勒给儿女的忠告》 “20岁到30岁是人生最为重要的学习阶段，如果在这一期间无法掌握好将来工作所必须的知识，就会无功而返，毫无成就，到了30岁时，你的生活就只剩下家庭生活的小圈圈。你会为了分期付款的住宅，或为了日常生活而奔波，你在30岁时必须抵达的人生目标，现在还仅仅是一个美梦，或者说是一个空想。但你必须把它看成是鼓励现在的你的动力。不将这一富于动机的目标铭记在心，没有任何确切的目标，要进行长时间的学习，是无法忍耐持久的。目标必须日日更新，与前途紧密地联系在一起。只有以此为出发点，你才能超越艰苦的环境。” 感想：时间紧迫，浪费时间等于浪费生命！ 二、人生是一场（不由自主的）马拉松。 大学仅仅是这场运动的热身。象牙塔外的生活要长久得多。跑完着段路需要的不（仅）是激情，而（更）是耐心与坚持。 ——原罗兰·贝格（中国）公司总经理新宇博士 感想：大学毕业后，走上社会的路还长着呢！该怎么走，最终决定于自己。鲁迅先生说，世界上本无路，走的人多了便有了路。要选择迷茫，还是汲取经验、义无返顾，亦或是走别人的老路，一切归于your option！ ​ 三、读万卷书，不如走万里路；走万里路，不如阅人无数；阅人无数，不如跟着成功人士走路。 ——北京浩竹猎头中心CEO王长江 感想：跟着成功人士走路，绝对没错。俗话说，三人行必有我师焉。哲理也云，近墨者黑，近朱者赤！和什么样的人做朋友，你就会具备某方面的气质，你就会知道你所要的到底是什么东西！ 四、学会平视权威，你会变得气宇轩昂，即高度；学会尊重法律，你会活得心安理得，即自由。——《在规则中生存》 感想：什么是权威？说不清道不明。可能一时他会是权威，可过后呢？他并不唯一。面对权威，如果你畏畏缩缩，那么你会始终抬不起头来，被自己的自卑心所压抑。 法律是什么？法律是制度是规则吗？答案是肯定的。但是正因为这个世界有法律，才会有正常的秩序，才有了真正的自由！ 五、超过别人一点点，别人就会嫉妒你；超过别人一大截，别人就会羡慕你。 感想：觉得这句话最为经典了。的确是这样的一个道理，没有人可以否认。 **六、一个自信的性格，一个放松的状态和一种能让人亲近的感觉，是一个内在性感的女人的特质。****——**杨澜阐释女人的性感 感想：的确，正如许多人说的，世界上没有丑女人。只要懂得表现自己，突出自己的个人优点，就会让人感到你的个人魅力。只要你足够自信，拥有轻松的心情，易于接近，有着自己性格的人，不论美或丑，也不论男人还是女人，你都会是最棒的！给自己足够的信心和勇气做自己想做的事情吧，要知道没有办不到，只有想不到的！ 六种方法，做一名更好的开发者 *来源：*http://news.csdn.net/n/20070711/106317.html 本文原作者（Jeremy D. Miller*，在纽约市一家著名的咨询公司担任自身咨询顾问、敏捷讲师。是开源项目**——structureMap* 的作者）结合自身经历，总结以下六种方法，可以帮助我们成为一名更好的开发者。 **1.**交谈 尽可能多地跟其他软件开发者交谈；培养个人关系；跟意见与你相左的人交流；跟经验更丰富的人交流；跟阅历丰富的人交流。多到Groups 中去，尤其是交谈自由随意的Groups——不约束主题，不约束交谈内容。 **2.**选择更好的环境 我遇到好多开发者，在我看来他们有成为优秀开发者的所有优点，只是他们没有机会在好的环境中工作。这里所说的好的环境，是指周围有一帮愿意且能够分享他们知识的开发者。如果你是“菜鸟级”开发者，你的成长路线将因他们而大为缩短；如果你是“高级”开发者，你的能力也会因为同伴的刺激和挑战而提高。 我之前就是在一个非常糟糕的小店打工，钱挣得不少，却是无法提升能力的地方。后来我冒险般地决定去了一家咨询公司，在那里我遇到了很多优秀的开发者。虽然这次换工作给我的家庭和个人来说并没有多大好处，但它给我的职业生涯带来了巨大的发展动力。 **3.**参与开源 也许你的工作会枯燥，甚至不合你的兴趣，你也从未从你的开发中得到乐趣。那么，你该参与一个开源项目了。 你可以选择你感兴趣的项目和技术，选择能促使你提高开发技能、让你尝试全新开发思路的项目，而且更为可贵的是，很多都是免费的。搞不好，还能赚点外快呢。 **4.**写博客 我曾不止一次地告诉我的妻子，我职业道路上一直在做的唯一一件明智的事情就是写博客。写博客，尤其是观点争论性质的博客，会帮助你整理最近一段时间的思考，没有什么比自己表达自己更引发思考的了，尤其是当有成百上千人读你博客的时候。 **5.**多浏览 博客圈中有丰富的资源，自由而免费。除了自己写，多浏览甚至留言跟他们争论都是提高自己很好的方法。 **6.**扩大阅读面 保持RSS订阅的平衡性。以前我订阅的技术类几乎全是敏捷开发的，但是最近我扩大了阅读面——开发、测试、工程管理……有时候看看别人在做什么、学什么，收获很大。 七大技巧助你成功迈向新的工作岗位！ 来源：电子工程专辑 如果你正面临一个新的职位，那么，祝贺你！你在找工作的过程中所付出的努力即将获得可观的回报。稍事休息，你就要投入到新的工作中去了。你下一步的目标是把自己融合到新的组织之中，下面就是使之顺利进行的7点技巧： 第一点：维护往昔的人脉 上班伊始，就要联系所有曾经帮助过你谋得新职位的人，向他们表示感谢。人们常常不会作出这种努力，因为，他们感觉将在新的工作岗位长期服务。但是，当今每一个美国人平均每4年就换一次工作，很可能说你正在计划不久就换工作。为此，你需要不断维护你的人脉。 第二点：头三个月回避**“大项目”** 在上班的第二天，你就思考：“这来了一个重要项目！我要立即承担下来，让他们对我刮目相看。”这是许多人在被雇用之后头三个月常犯的错误。你从整个系统和周围的人学习知识是至关重要的。你不可能理解至今你做的某些决定的牵涉面。你的公司不会指望你在最初几周时间内就了解一切。为此，你应该花时间学习整个工作的流程。 第三点：与利益息息相关的人搞好人际关系 这些人对你的成功起着举足轻重的作用，他们不一定都挂上了华丽的头衔。要找到这些人，寻求他们的支持并向他们提供你的支持，从而开始融合过程。 第四点：孰轻孰重，谨慎识别 世界上最不愉快的事情都是源于出乎意料。要制定一个计划，说明你将如何解决你面临的最严峻的挑战以及你希望完成任务的时间表，然后，跟你的上司交流。 第五点：保持积极向上的心态 不要把你对工作的关心或疑虑与其它同事分享。即使你的上司出尔反尔，也要小心。所以，当你的上司(或其它人)在头三个月问你，“工作进展如何？”的时候，唯一的答案就是“工作进展非常顺利”，因为你仍然在学习。 第六点：听取建议，准确把握工作 当打听消息的时候，为了给你的新雇主增加更多的价值，要仔细倾听同事对你的建议。要问这样的问题“这件工作过去是怎么做的？”这种问题将让你有可能洞察如何尽早地取得一些成功。 第七点：持续不断地进行自我职业管理 必须清醒地认识到，除了你之外，没有人会关注你的职业发展。在职业管理的过程中，制定有洞察力和长远的目标是至关重要的。当项目来临时，这肯定会发挥作用。如果一个项目适合你的长远职业计划，那么，就承担下来；如果不是，就要婉言谢绝(你“太忙”)。你对所分配工作越主动，就越有助于你实现你的职业目标，你就越快地达到你的职业目标。 好了，最后祝你工作愉快！ 一位软件工程师的6年总结 作者：成晓旭 “又是一年毕业时”，看到一批批学子离开人生的象牙塔，走上各自的工作岗位；想想自己也曾经意气风发、踌躇满志，不觉感叹万千……本文是自己工作6年的经历沉淀或者经验提炼，希望对所有的软件工程师们有所帮助，早日实现自己的人生目标。本文主要是关于软件开发人员如何提高自己的软件专业技术方面的具体建议，前面几点旨在确定大的方向，算是废话吧。 谨以此文献给那个自己为你奉献3年青春与激情的开发团队。还有团队成员：PPL、YT、YK 、TYF、LGL、CHL、CDY、CB、DPD。 1**、分享第一条经验**：“学历代表过去、能力代表现在、学习力代表未来。”其实这是一个来自国外教育领域的一个研究结果。相信工作过几年、十几年的朋友对这个道理有些体会吧。但我相信这一点也很重要：“重要的道理明白太晚将抱憾终生！”所以放在每一条，让刚刚毕业的朋友们早点看到哈！ 2**、一定要确定自己的发展方向，并为此目的制定可行的计划**。不要说什么，“我刚毕业，还不知道将来可能做什么？”，“跟着感觉走，先做做看”。因为，这样的观点会通过你的潜意识去暗示你的行为无所事事、碌碌无为。一直做技术，将来成为专家级人物？向管理方向走，成为职业经理人？先熟悉行业和领域，将来自立门户？还是先在行业里面混混，过几年转行做点别的？这很重要，它将决定你近几年、十年内“做什么事情才是在做正确的事情！”。 3**、软件开发团队中，技术不是万能的，但没有技术是万万不能的！**在技术型团队中，技术与人品同等重要，当然长相也比较重要哈，尤其在MM比较多的团队中。在软件项目团队中，技术水平是受人重视和尊重的重要砝码。无论你是做管理、系统分析、设计、编码，还是产品管理、测试、文档、实施、维护，多少你都要有技术基础。算我孤陋寡闻，我还真没有亲眼看到过一个外行带领一个软件开发团队成功地完成过软件开发项目，哪怕就一个，也没有看到。倒是曾经看到过一个“高学历的牛人”(非技术型)带一堆人做完过一个项目，项目交付的第二天，项目组成员扔下一句“再也受不了啦！”四分五裂、各奔东西。那个项目的“成功度”大家可想而知了。 4**、详细制定自己软件开发专业知识学习计划，并注意及时修正和调整****(软件开发技术变化实在太快)****。**请牢记：“如果一个软件开发人员在1、2年内都没有更新过自己的知识，那么，其实他已经不再属于这个行业了。”不要告诉自己没有时间。来自时间管理领域的著名的“三八原则”告诫我们：另外的那8小时如何使用将决定你的人生成败！本人自毕业以来，平均每天实际学习时间超过2小时。 5**、书籍是人类进步的阶梯，对软件开发人员尤其如此。**书籍是学习知识的最有效途径，不要过多地指望在工作中能遇到“世外高人”，并不厌其烦地教你。对于花钱买书，我个人经验是：千万别买国内那帮人出的书！我买的那些家伙出的书，!00%全部后悔了，无一本例外。更气愤的是，这些书在二手市场的地摊上都很难卖掉。“拥有书籍并不表示拥有知识；拥有知识并不表示拥有技能；拥有技能并不表示拥有文化；拥有文化并不表示拥有智慧。”只有将书本变成的自己智慧，才算是真正拥有了它。 6**、不要仅局限于对某项技术的表面使用上，哪怕你只是偶尔用一、二次。** “对任何事物不究就里”是任何行业的工程师所不应该具备的素质。开发Windows应用程序，看看Windows程序的设计、加载、执行原理，分析一下PE文件格式，试试用SDK开发从头开发一个Windows应用程序；用VC＋＋、 Delphi、Java、.Net开发应用程序，花时间去研究一下MFC、VCL、J2EE、.Net它们框架设计或者源码；除了会用J2EE、 JBoss、Spring、Hibernate等等优秀的开源产品或者框架，抽空看看大师们是如何抽象、分析、设计和实现那些类似问题的通用解决方案的。试着这样做做，你以后的工作将会少遇到一些让你不明就里、一头雾水的问题，因为，很多东西你“知其然且知其所以然”！ 7**、在一种语言上编程，但别为其束缚了思想。** “代码大全”中说：“深入一门语言编程，不要浮于表面”。深入一门语言开发还远远不足，任何编程语言的存在都有其自身的理由，所以也没有哪门语言是“包治百病”的“灵丹妙药”。编程语言对开发人员解决具体问题的思路和方式的影响与束缚的例子俯拾皆是。我的经验是：用面对对象工具开发某些关键模块时，为什么不可以借鉴C、C51、汇编的模块化封装方式？用传统的桌面开发工具(目前主要有VC++、Delphi)进行系统体统结构设计时，为什么不可以参考来自Java社区的IoC、AOP设计思想，甚至借鉴像Spring、Hibernate、JBoss等等优秀的开源框架？在进行类似于实时通信、数据采集等功能的设计、实现时，为什么不可以引用来自实时系统、嵌入式系统的优秀的体系框架与模式？为什么一切都必须以个人、团队在当然开发语言上的传统或者经验来解决问题？？？“他山之石、可以攻玉”。 8**、养成总结与反思的习惯，并有意识地提炼日常工作成果，形成自己的个人源码库、解决某类问题的通用系统体系结构、甚至进化为框架。**众所周知，对软件开发人员而言，有、无经验的一个显著区别是：无经验者完成任何任务时都从头开始，而有经验者往往通过重组自己的可复用模块、类库来解决问题（其实这个结论不应该被局限在软件开发领域、可以延伸到很多方面）。这并不是说，所有可复用的东西都必须自己实现，别人成熟的通过测试的成果也可以收集、整理、集成到自己的知识库中。但是，最好还是自己实现，这样没有知识产权、版权等问题，关键是自己实现后能真正掌握这个知识点，拥有这个技能。 9**、理论与实践并重，内外双修。**工程师的内涵是：以工程师的眼光观察、分析事物和世界。一个合格的软件工程师，是真正理解了软件产品的本质及软件产品研发的思想精髓的人（个人观点、欢迎探讨）。掌握软件开发语言、应用语言工具解决工作中的具体问题、完成目标任务是软件工程师的主要工作，但从软件工程师这个角度来看，这只是外在的东西，并非重要的、本质的工作。学习、掌握软件产品开发理论知识、软件开发方法论，并在实践中理解、应用软件产品的分析、设计、实现思想来解决具体的软件产品研发问题，才是真正的软件工程师的工作。站在成熟理论与可靠方法论的高度思考、分析、解决问题，并在具体实践中验证和修正这些思想与方式，最终形成自己的理论体系和实用方法论。 10**、心态有多开放，视野就有多开阔。**不要抱着自己的技术和成果，等到它们都已经过时变成垃圾了，才拿出来丢人现眼。请及时发布自己的研究成果：开发的产品、有创意的设计或代码，公布出来让大家交流或者使用，你的成果才有进化和升华的机会。想想自己2000年间开发的那些Windows系统工具，5、6年之后的今天，还是那个样子，今天流行的好多Windows系统工具都比自己的晚，但进化得很好，且有那么多用户在使用。并且，不要保守自己的技术和思想，尽可能地与人交流与分享，或者传授给开发团队的成员。“与人交换苹果之后，每个人还是只有一个苹果；但交换思想之后，每个人都拥有两种思想”，道理大家都懂，但有多少人真正能做到呢？ 11**、尽量参加开源项目的开发、或者与朋友共同研制一些自己的产品，千万不要因为没有钱赚而不做。**网络早已不再只是“虚拟世界”，网上有很多的开源项目、合作开发项目、外包项目，这都是涉猎工作以外的知识的绝好机会，并且能够结识更广的人缘。不要因为工作是做ERP，就不去学习和了解嵌入式、实时、通信、网络等方面的技术，反过来也是一样。如果当他别人拿着合同找你合作，你却这也不会，那也不熟时，你将后悔莫及。 12**、书到用时方恨少，不要将自己的知识面仅仅局限于技术方面。**诺贝尔经济学奖得主西蒙教授的研究结果表明： “对于一个有一定基础的人来说，他只要真正肯下功夫，在6个月内就可以掌握任何一门学问。”教育心理学界为感谢西蒙教授的研究成果，故命名为西蒙学习法。可见，掌握一门陌生的学问远远没有想想的那么高难、深奥。多方吸取、广泛涉猎。极力夯实自己的影响圈、尽量扩大自己的关注圈。财务、经济、税务、管理等等知识，有空花时间看看，韬光养晦、未雨绸缪。 13**、本文的总结与反思：** A：不要去做技术上的高手，除非你的目标如此。虽然本文是关于提高软件开发知识的建议，做技术的高手是我一向都不赞同的。你可以提高自己的专业知识，但能胜任工作即止。 B：提高软件知识和技术只是问题的表面，本质是要提高自己认识问题、分析问题、解决问题的思想高度。软件专业知识的很多方法和原理，可以很容易地延伸、应用到生活的其它方面。 C：在能胜任工作的基础上，立即去涉猎其它领域的专业知识，丰富自己的知识体系、提高自己的综合素质，尤其是那些目标不在技术方面的朋友。 **[转帖]**年轻工程师的高手进阶之道 本人做过技术开发工作多年，从焊电路板的小工程师逐渐做到项目经理、研发经理，现在 做到总工程师，作为工程师有亲身的感受，作为研发主管，对工程师的性格、心理和知识结构有非常深入的了解，现在把自己的一点感悟与大家分享，希望大家批评指正，欢迎补充完善。 有强烈的好奇心。这是成为高手的必要条件，喜欢新生事物，对问题喜欢刨根问底，以钻研为乐趣。那种得过且过，敷衍了事，仅仅把工作当作饭碗的人连熟手都成不了，更何况高手。有好奇心的人，可以为解决一个问题通宵干，躺在床上也在寻思解决方案，这样的人就是高手的胚子！ 做事谨慎细致，考虑问题全面。技术工作来不得半点粗心马虎，否则问题多多，后患无穷。甚至给生产、产品品质造成重大影响，给公司造成重大经济损失。马虎的人不可能成为优秀的工程师，只可能当当助手，哪个上司敢把项目交给一个马大哈？改，难呐，本性难移！趁早找个理由炒他鱿鱼！ 模拟、数字，高频、低频，软件、硬件，模具、结构，甚至文字功底也必不可少(撰写产品使用手册、工艺指导书等等也可看出一个人的专业水准)具备完善的知识体系。企业中的工程师不是研究学问，也没指望成为科学家，是为企业的产品服务的。因此，全面的知识架构对于迅速完成产品开发任务非常重要，复合型人才更为难得。既然是高手，当然十八般兵器样样精通，否则，难以独挑大梁，只能做配角。没有全面的知识，要上升到项目经理、研发经理层面是不可能的。企业中的工程师必须时刻关注成本、生产工艺、用户需求、测试环境、采购渠道、配套厂家工艺水平等等许多方面，一点不慎后续问题就冒出来了。你的设计再好，工艺性差，车间生产装配调试困难，导致生产成本急剧上升，或者配套厂家工艺水平达不到又有什么用？或者器件采购困难，经常影响按期交货也同样对企业不利。时刻提醒自己，产品是赚钱的工具，自己才能的张扬要服从这一大前提。这里要特别提醒那些学历高，某方面技术精深，但对企业运作、生产工艺、生产流程、物流管理、行销模式、市场调查、用户心理是“二把刀”的人，不要自恃一点DSP皮毛就以为可以天下无敌，谦虚地深入基层，熟悉一切，虚心学习其他方面的知识，才有大为！ 思路开阔，能从市场、用户和生产工艺角度考虑产品开发。唯技术至上的人，思路狭隘，即使聪明过人，只能扮演一个处理具体问题的小角色。企业的唯一目标是赚钱，能赚钱就是好产品，不能赚钱就等于零。这就能解释为什么很多研究所、大学开发的产品填补了多少多少空白，但在产业化过程中却总赚不到钱，最后落满灰尘。企业的工程师，务必坚持市场第一，用户至上的开发思路，你的工作仅仅是开发出低成本的、工艺性好的、品质稳定的，最关键是满足目标用户需求的产品，不能凭想象发挥，自以为是，要知道，用户永远是对的，你不能让他们服从你的思路，你每天窝在实验室，对市场又了解多少？对消费心理又知道多少？别自以为聪明，道听途说几句话就轻易下结论！ 现实、灵活的开发思路是高手的重要特征。企业的产品开发是和市场紧密联系在一起的，不是国家拨款的基础理论研究。树立市场化的研发策略是高手必备的素质！不要指望你能搞出超英赶美的世界级产品，你现在的实验条件、项目管理水平、人员素质、资金投入、信息交流等等和人家相比差了十万八千里，你凭什么搞出世界级的东西？家电巨头投下数亿元开发手机，高手云集，十余年了，手机的核心技术还是人家的。你做过的电路、编写过的程序千万人做过，你只不过东拼西凑地组合出了一个东西而已，必须要清醒地、谦虚地认识到这一层面。因此，在开发过程中，不要一切都自己开发、研究，大胆地借鉴国外的东西，绝大多数产品人家早已经普及，不妨照搬其中的功能模块，再结合自己实际情况，去搞开发才是高明的做法。再者别人的产品经过现场用户的使用，许多隐患已经消除，水平再高的人做的新产品也会从用户那里反馈回来一些缺陷，直接模仿别人的产品，即可消除许多缺陷点。同时，可以大大缩短研发周期，减少研发费用，抢先一步推向市场，绝对是上策。当然，受到专利保护的技术要注意，仔细看看相关法律，在法律允许范围内从事，体会一下总还是有办法的！ 这里要一再强调，我所指的是“企业里受欢迎的高手！”不是科学院里的专家，不是陈景润！这是截然不同的概念。企业里的高手，不仅仅要了解技术、工艺以及生产方面的知识，团队意识，管理才能，协调沟通能力，系统规划能力，甚至语言表达能力都是很重要的，这些是高手的综合素质的体现。 特别对毕业2-4年的年轻工程师提个醒，要清楚认识自己，知道自己的斤两，不要以为做过2-3个项目就飘飘然，人家也是那样过来的！其实还差得远！等到了二十七、八岁，你会逐渐明白的。学海无涯，除过极个别特殊天才人物，大家都是普通人，互有长短，谦虚谨慎，心态平和是成就大事的基础，总那么浮躁，狂妄，藐视他人，将导致团队合作困难，同事关系紧张，项目的进展必然不顺利，从而延长成为高手的时间，单纯从技术来看，不过在某个狭小领域有小小心得而已，距离经验丰富、技能全面的高手还有八年抗战的历程。一般来讲，毕业5-6年，技术初步达到全面成熟（那些得过且过的人，二十年也成熟不了，现在几十岁来应聘的人也不少，水平还是马马虎虎），再逐渐吸收管理知识、市场知识等其他企业里所涉及的方面的技能，30岁左右基本圆满已经非常不简单了！时刻要有谦和的心态，是在团队中脱颖而出的必须条件。","categories":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/categories/English/"}],"tags":[{"name":"英语","slug":"英语","permalink":"https://bobit.github.io/tags/英语/"},{"name":"转载","slug":"转载","permalink":"https://bobit.github.io/tags/转载/"}]},{"title":"常用易错单词","slug":"English/常用易错单词","date":"2018-06-05T01:00:10.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/62f2c90a.html","link":"","permalink":"https://bobit.github.io/posts/62f2c90a.html","excerpt":"","text":"state condition situation 的区别 都含&quot;情况&quot;的意思。 state：比较常用，各种状态都可以用它，但是它更着重于一种心理状态或者物理状态。指&quot;人或物存在或所处的状态&quot;, 但不着重于&quot;这种状态和具体原因或条件的关系&quot;, 如: He is in a good state.他身体健康。水在标准大气压下 100 摄氏度时是什么状态？state。 condition：指&quot;由于一定的原因、条件或环境所产生的特定情况&quot;, 如: His condition will not permit him to travel.他的情况不允许他旅游。 situation：指&quot;多种具体情况造成的综合状态&quot;, 常着重&quot;这种状态的影响或和处于该状态的事物的关系&quot;, 如: We are in difficult situation. 我们处于困境。 status：用在人的身上一般是其身份和地位，作“状态，情形”讲时，多指政治和商业，指物时相当于 situation。如：最近的国际形式如何？status。 生词本 mediocre 英 [,miːdɪ’əʊkə] 美 [,midɪ’okɚ] adj. 普通的；平凡的；中等的 demonstrate英 ['demənstreɪt]美 ['dɛmən’stret] vt. 证明；展示；论证 vi. 示威 proficiency英 [prə’fɪʃ(ə)nsɪ]美 [prə’fɪʃənsi] n. 精通，熟练","categories":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/categories/English/"}],"tags":[{"name":"英语","slug":"英语","permalink":"https://bobit.github.io/tags/英语/"},{"name":"转载","slug":"转载","permalink":"https://bobit.github.io/tags/转载/"}]},{"title":"互联网常用名词大全","slug":"English/互联网常用术语大全","date":"2018-06-04T01:00:10.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/9253509e.html","link":"","permalink":"https://bobit.github.io/posts/9253509e.html","excerpt":"","text":"Abstract schema–抽象模式 一个entity bean的部署描述的一部分，它定义了bean的持续化字段和关联关系。 Abstract schema name–抽象模式名 在EJB QL查询中引用的一个逻辑命名。你需要为每个容器管理持续化的entity bean指定一个抽象模式名。 Abstract schema type–抽象模式类型 所有的EJB QL表达式都对应一个类型。如果表达式是一个抽象模式名，那么它的类型默认是定义了这个抽象模式名的entity bean的local接口。 Backus-Naur Form (BNF)–巴科斯-诺尔范式 一种描述高级语言语法的一种表示法。这一章的语法图表使用了BNF表示法。 navigation–跨越 在一个EJB QL表达式中对关联关系的使用。跨越操作符是一个句点。 path expression–路径表达式 一个跨越到相关entity bean的表达式。 persistent field–持续化字段 一个容器管理持续化的entity bean中的一个虚拟字段；它存储在一个数据库中。 relationship field–关联字段 一个容器管理持续化的entity bean中的一个虚拟字段；它确定了一个相关的entity bean。 JDBC（Java DataBase Connectivity） java数据库连接 HCM（Human Capital Management） 人力资本管理 HR（Human Resource） 解释为人力资源，现在统称为人力资源顾问，跟传统人事有本质区别。 DevOps Development和Operations的组合词 PaaS（Platform-as-a-Service） 平台即服务 TL（Team Leader） PM（Project Manager） PMO（Project Management Officer） 一般称为项目管理办公室、项目管理中心或者项目管理部 IaaS（Infrastructure-as-a-Service） 基础设施即服务 SaaS（Software-as-a-Service(） 软件即服务 PV（page view） 页面浏览量，用户每一次对网站中的每个页面访问均被记录1次。用户对同一页面的多次刷新，访问量累计。 单台服务器每天PV计算 公式1：每天总PV = QPS * 3600 * 6 公式2：每天总PV = QPS * 3600 * 8 UV（Unique Visitor） 独立访客 通过客户端的cookies实现。访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次 。即同一页面，客户端多次点击只计算一次，访问量不累计。 服务器数量： 机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器 机器：ceil( 每天总PV / 单台服务器每天总PV ) IP（Internet Protocol） 本意本是指网络协议，在数据统计这块指通过ip的访问量。即同一页面，客户端使用同一个IP访问多次只计算一次，访问量不累计。 UV、IP的区别 比如你是ADSL拨号上网，拨一次号自动分配一个IP，进入了网站，就算一个IP；断线了而没清理Cookies，又拨号一次自动分配一个IP，又进入了同一个网站，又统计到一个IP，这时统计数据里IP就显示统计了2次。UV没有变，是1次。 同一个局域网内2个人，在2台电脑上访问同一个网站，他们的公网IP是相同的。IP就是1，但UV是2。 TPS（Transactions Per Second） 每秒处理的事务数目。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息作出的评估分。 QPS（Queries Per Second） 每秒能处理查询数目，也即是最大吞吐能力。是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。 QPS统计方式 [一般使用 http_load 进行统计] QPS = 总请求数 / ( 进程总数 * 请求时间 ) QPS: 单个进程每秒请求服务器的成功次数 峰值QPS: 原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间 公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS) RPS（Requests Per Second） 每秒能处理的请求数目。等效于QPS DSL（Domain Specific Language） 即领域特定语言，或者直接翻译成“特定领域的语言”，再直接点，其实就是这个语言不通用，只能用于特定的某个领域，俗称“小语言”。因此DSL也是语言。 FAQ（Frequently Asked Questions） 中文意思就是“经常问到的问题”，或者更通俗地叫做“常见问题解答”。FAQ是当前网络上提供在线帮助的主要手段，通过事先组织好一些可能的常问问答对，发布在网页上为用户提供咨询服务。 DCL（double check lock） 双重检查锁定，已被广泛当做多线程环境下延迟初始化的一种高效手段。遗憾的是，在Java中，如果没有额外的同步，它并不可靠。 RAID（Redundant Array of Independent Disks） 独立冗余磁盘阵列 Apache 英 [əˈpætʃi] 美 [ə’pætʃɪ] Hadoop [hædu:p] 哈杜噗，没有官方的发音，通常都读作[h∧du:p] SOA（service-oriented architecture） 面向服务的体系结构是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。Martin Fowler提出SOA歧义Service Oriented Ambiguity，认为&quot;什么是SOA&quot;是不可能回答，因为不同的人意味着不同的事情，SOA意味服务接口，意味流程整合，意味资源再利用，意味着管制。 ASO（App store Optimization） 是“应用商店优化”的简称。就是提升你APP在各类APP应用商店/市场排行榜和搜索结果排名的过程。 B2B：商家到商家 阿里巴巴 B2C：商家到用户 京东 C2C：用户到用户 淘宝 B2B2C：商家到商家到用户 天猫 O2O：线上到线下 百度外卖、美团、饿了么 CMS 内容管理系统,实现菜单，链接，图片，导航栏等的可配置化系统。 CRM 客户关系管理系统，一套为各种角色提供各种功能的系统。包括不同角色的权限等。这个系统主要是为了客户提供功能的系统。 WMS 仓库管理系统 通过入库业务、出库业务、仓库调拨、库存调拨和虚仓管理等功能，对批次管理、物料对应、库存盘点、质检管理、虚仓管理和即时库存管理等功能综合运用的管理系统，有效控制并跟踪仓库业务的物流和成本管理全过程，实现或完善的企业仓储信息管理。","categories":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/categories/English/"}],"tags":[{"name":"英语","slug":"英语","permalink":"https://bobit.github.io/tags/英语/"},{"name":"转载","slug":"转载","permalink":"https://bobit.github.io/tags/转载/"}]},{"title":"互联网名词大全","slug":"English/互联网名词大全","date":"2018-06-03T01:00:10.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/d6a87309.html","link":"","permalink":"https://bobit.github.io/posts/d6a87309.html","excerpt":"","text":"数据统计分析篇 PC 网站 Traffic 流量，在互联网领域内，统计网站使用量的笼统用语。 UV Unique Vister，独立访客。 PV Page View，即网站被浏览的总次数。 IP 即Internet Protocols，指独立 IP 数，一天内相同 IP 地址只被计算一次。 Impressions 展示数，也称接触人次，用户打开网页或者广告的每一次显示，就是一个 Impression；广告主希望 10 万人次看到广告，就是 10 万次 Impression；是评估广告效果的元素之一。 Click （点击量/点击次数）即 Click through，用户点击广告的次数，评估广告效果的指标之一。 Click Rate （点击率/点进率）即 Click through Rate;即网络广告被点击的次数与访问次数的比例，即 clicks/impressions.如果这个页面 被访问了 100 次，而页面上的广告也被点击了 20 次，那么 CTR 为 20%，CTR 是评估广告效果的指标之一。 人均访问页面 PV 总和除以 IP=人均访问页面。人均访问页面&gt;=10 个，才算优质用户。 页面停留时间 访客浏览单页面所花费的平均时长,页面的停留时长=进入下一个页面的时 间-进入本页面 的时间。 Reach 到达率，特定目标受众，在特定时期内有机会看到广告或广告活动的比例。也称为“覆盖 ”或“覆盖范围”。 跳出率： 跳出率是指浏览了一个页面就离开的用户占一组页面或一个页面访问次数的百分比。 二跳率 网站页面展开后，用户在页面上产生的首次点击被称为 “二跳”，二跳的次数即为”二跳量”，二跳量与浏览量的比值称为页面的二跳率。 CR 转化率，Conversion Rate 的缩写，是指访问某一网站访客中，转化的访客占全部访客的比例。 ROI Return On Investment 的缩写，投资回报率。是指通过投资而应返回的价值，即企业从一项投资活动 中得到的经济回报。它涵盖了企业的获利目标。 电商 SKU Stock Keeping Unit（库存量单位）。即库存进出计量的单位，可以是以件，盒，托盘等为单位。SKU 这是 对于大型连锁超市 DC（配送中心）物流管理的一个必要的方法。现在已经被引申为产品统 一编号的简称，每种产品均对应有唯一的 SKU 号。 客单价 是指每一个订单的平均购买商品金额，也就是平均交易金额。 GMV Gross Merchandise Volume，是成交总额（一定时间段内）的意思。 动销率 商品动销率=动销品种数 ÷ 门店经营总品种数*100%。 重复购买率 指消费者在网站中的重复购买次数。 APP DAU Daily Active User，日活跃用户数量。 MAU Month Active User 月活跃用户量。 ARPU (Average Revenue Per User)即每用户平均收入，用于衡量电信运营商和互联网公司业务收入的指标。 用户留存率 在互联网行业中，用户在某段时间内开始使用应用，经过一段时间后，仍然继续使用该应用的用户，被认作是留存用户。这部分用户占当时新增用户的比例即是留存率，会按照每隔 1 单位时间（例日、周、月）来进行统计。 商业模式篇 B2B（经济组织对经济组织） 是指企业对企业之间的营销关系，它将企业内部网，通过B2B网站与客户紧密结合起来，通过网络的快速反应，为客户提供更好的服务，从而促进企业的业务发展。 B2C（经济组织对消费者） B2C 即企业通过互联网为消费者提供一个新型的购物环境—— 网上商店，消费者通过网络在网上购物、网上支付等消费行为。 B2B2C（企业对企业对消费者） 是一种电子商务类型的网络购物商业模式，B是BUSINESS的简称，C是CUSTOMER的简称，第一个B指的是商品或服务的供应商，第二个B指的是从事电子商务的企业，C则是表示消费者。 C2C（消费者对消费者） 就是个人与个人之间的电子商务。比如一个消费者有一台电脑，通过网络进行交易，把它出售给另外一个消费者，此种交易类型就称为 C2C 电子商务。 C2B（消费者集合竞价团购） 先有消费者需求产生而后有企业生产，即先有消费者提出需求，后有生产企业按需求组织生产。 F2C 指的是 Factory to customer，即从厂商直接到消费者个人的电子商务模式 O2O（网上与网下相结合）是指将线下的商务机会与互联网结合，让互联网成为线下交易的前台。 P2P（点对点、渠道对渠道） 是英文 peer-to peer 的缩写，意即个人对个人。又称点对点网络借款，是一种将小额资金聚集起来借贷给 有资金需求人群的一种民间小额借贷模式。 P2P 还有一种更广泛的概念，泛指互联网金融，借助互联网、移动互联网技术的网络信贷平 台及相关理财行为、金融服务。 众筹 是指用团购+预购的形式，向网友募集项目资金的模式。众筹利用互联网和 SNS 传播的特性，让小企业、艺术家或个人对公众展示他们的创意，争取大家的关注和支持，进而获得所需要的资金援助。 众包 众包指的是一个公司或机构把过去由员工执行的工作任务，以自由自愿的形式外包给非特定的（而且通常是大型的）大众网络的做法。众包的任务通常是由个人来承担，但如果涉及到需要多人协作完成的任务，也有可能以依靠开源的个体生产的形式出现。 孵化器 一般指企业孵化器，在中国也称高新技术创业服务中心，它通过为新创办的科技型中小企业提供物理空间和基础设施，提供一系列的服务支持，进而降低创业者的创业风 险和创业成本，提高创业成功率，促进科技成果转化，培养成功的企业和企业家。 SaaS（软件服务） 是 Software-as-aService（软件即服务）的简称。它是一种通过 Internet 提供软件的模式，厂商将应用软件 统一部署在自己的服务器上，客户可以根据自己实际需求，通过互联网向厂商定购所需的 应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提 供的服务。 CRM 现代信息技术、经营思想的结合体，它以信息技术为手段，通过对以“客户为中心” 的业务流程的重要组合和设计，形成一个自动化的解决方案，以提高客户的忠诚度，最终实现业务操作效益的提高和利润的增长。 SoLoMo（社交+本地化+移动） 这个词形容三种概念混合的产物，即：Social（社交的）、Local（本地的）、Mobile（移动的），连起来就是 SoLoMo（索罗门），社交本地移动，即社交加本地化加移动，它代表着未来互联网发展的趋势。 LBS 基于位置的服务，它是通过电信移动运营商的无线电通讯网络（如 GSM 网、CDMA 网）或外部定位方式(如 GPS)获取移动终端用户的位置信息（地理坐标，或大地坐标），在地理信息系统（外语缩写：GIS、外语全称：Geographic Information System）平台的支持下，为用户提供相应服务的一种增值业务。 SNS Social Networking Services，即社会性网络服务，是指个人之间的关系网络,这种基于社会网络关 系系统思想的网站就是社会性网络网站(SNS 网站)。现在许多 WEB2.0 网站都属于SNS 网站， 如网络聊天（IM）、交友、视频分享、博客、播客、网络社区、音乐共享等。社会性网络 的理论基础源于六度理论（六度分隔理论，Six Degrees of Separation）和150 法则（Rule Of 150）。另外不仅现在一些大公司网站开始了一些 SNS 应用，一些垂直领域的行业站点也开 始了 SNS 的尝试。目前国外较出名的是 facebook、myspac，国内流行的 SNS 有海内、校内、 开心、51 等。 OTT “Over The Top”的缩写，是指通过互联网向用户提供各种应用服务。这种应用和目前运营商所提供的 通信业务不同，它仅利用运营商的网络，而服务由运营商之外的第三方提供。目前，典型的OTT业务有互联网电视业务，苹果应用商店等。 OTA 旅游电子商务行业的专业词语。代表为号码百事通、旅游百事通、驴妈妈旅游网、携程网、出游客旅游网、乐途旅游网、欣欣旅游网、芒果网、艺龙网、同程网、搜旅网、途 牛旅游网和易游天下、快乐 e 行旅行网等。OTA 的出现将原来传统的旅行社销售模式放到网络平台上，更广泛的传递了线路信息，互动式的交流更方便了客人的咨询和订购。 电子商务 以信息网络技术为手段，以商品交换为中心的商务活动。在因特网开放的网络 环境下，基于浏览器/服务器应用方式，买卖双方不谋面地进行各种商贸活动，实现消费者的网上购物、商户之间的网上交易和在线电子支付以及各种商务活动、交易活动、金融活 动和相关的综合服务活动的一种新型的商业运营模式。电子商务分为：ABC、B2B、B2C、C2 C、B2M、M2C、B2A(即 B2G)、C2A(即 C2G)、O2O 等。 海淘 通过互联网检索海外商品信息，并通过电子订购单发出购物请求，然后填上私人信用卡号码，由海外购物网站通过国际快递发货，或是由转运公司代收货物再转寄回国。海淘，一般付款方式是款到发货(在线信用卡付款、PayPal 账户付款)。 Rebate Site 返利站 返利站采用购物返现金的形式聚集大量网络购物会员，会员从这里去淘宝网和各大网上商城购物，订单完成后(无退货)，返利站作为该商城的合作伙伴，可从该商城得到一定比例的销售佣金，返利站再把佣金的50%—— 100%的返还给会员，返利站还推出团购返利，涵盖几十家知名团购网站，团购后再返利！ 这就是现金返利的来源，一点也不影响会员本来能享受到的任何优惠活动。 POP 为向网站以外的用户提供服务的开放平台，例如京东、苏宁、亚马逊都推出开放平台业务。未来电商在这块的竞争也日趋激烈。 微商 基于微信生态的社会化分销模式，是企业或者个人基于社会化媒体开店的新型电商 ，从模式上来说主要分为两种：基于微信公众号的微商成为 B2C 微商，基于朋友圈开店的成 为C2C 微商。微商和淘宝一样，有天猫平台(B2C 微商)也有淘宝集市(C2C 微商)。所不同的是 微商基于微信“连接一切”的能力，实现商品的社交分享、熟人推荐与朋友圈展示。从微商来流程来说，微商主要由基础完善的交易平台微盟旺铺、营销插件、分销体系以及个人端分享推广微客四个流程部分组成。 微店 全球第一个云销售电子商务，是零成本开设的巨型商城，是计算机云技术和传统电子商务相结合的创新模式。微店并不是利用手机开网店，这个“微”是指无须资金、无须成本、无须处理货源，无须处理物流和客服，就可以赚取推广佣金。微店的模式之所以受到追捧，是因为它颠覆了传统网商既要找货源，又要做推广的高门槛要求，很好地解决了货源与推广的分工问题。这是互联网分工进一步细化的体现。 UGC 互联网术语，全称为 User Generated Content，也就是用户生成内容的意思。UGC 的概念最早起源于互联网领域，即用户将自己 原创的内容通过互联网平台进行展示或者提供给其他用户。UGC 是伴随着以提倡个性化为主 要特点的 Web2.0 概念兴起的。 PGC 全称：Professional Generated Content），互联网术语。指专业生产内容（视频网站）、专家生产内容（微博）。用来泛 指内容个性化、视角多元化、传播民主化、社会关系虚拟化。 OEM 也称为定点生产，俗称代工（生产），基本含义为品牌生产者不直接生产产品，而是 利用自己掌握的关键的核心技术负责设计和开发新产品，控制销售渠道，具体的加工任务 通过合同订购的方式委托同类产品的其他厂家生产。之后将所订产品低价买断，并直接贴上自己的品牌商标。 ODM 某“原始设计制造商”设计出某产品后，在某些情况下可能会被另外一些企业看中， 要求配上后者的品牌名称来进行生产，或者稍微修改一下设计来生产。这样可以使其他厂商减少自己研制的时间。承接设计制造业务的制造商被称为 ODM 厂商，其生产出来的产品就是 ODM 产品。 鼠标+水泥（Clicks and Mortar） 又称为“砖块+鼠标”（Bricks and Clicks），是指传统商业模式（主要运用直接的面对面的方式与顾客发生联系）与互联网商业模式（主要通过网站、电子邮件、FTP 以及其他互联网技术手段与顾客发生联系）的联姻。它是一种将先进的互联网技术与传统优势资源相结合，利用先进的信息技术提高传统 业务的效率和竞争力，实现真正的商业利润的电子商务运作模式。鼠标+水泥是一个传统企 业电子化和互联网公司实体化的趋同过程，是电子商务发展的趋同方向。 “互联网+” 互联网+”是创新 2.0 下的互联网发展新形态、新业态，即充分发挥互联网在 生产要素配置中的优化和集成作用，将互联网的创新成果深度融合于经济社会各领域之中，提高实体经济的创新力和生产力，形成更广泛的以互联网为基础设施和实现工具的经济发展新形态。“互联网+”，是知识社会创新 2.0 推动下的互联网形态演进。新一代信息技术发展催生了创新 2.0，而创新 2.0 又反过来作用与新一代信息技术形态的形成与发展，重塑了物联网、云计算、社会计算、大数据等新一代信息技术的新形态，并进一步推动知识社会以用户创新、开放创新、大众创新、协同创新为特点的创新 2.0，改变了我们的生产、 工作、生活方式，也引领了创新驱动发展的“新常态”。 物联网 把所有物品通过信息传感设备与互联网连接起来，进行信息交换，即“物物相息”，以实现智能化识别和管理。 网络媒体、广告、营销篇 网络媒体 Portal 门户网站 是指通向某类综合性互联网信息资源并提供有关信息服务的应用系统。门户网站最初提供搜索服务、目录服务，后来由于市场竞争日益激烈，门户网站不得不快速地拓展各种新的业务类型，希望通过门类众多的业务来吸引和留住互联网用户，以至于目前门户网站的业务包罗万象，成为网络世界的“百货商场”或“网络超市”。在中国，综合门户网站包含 新浪，网易，搜狐，腾迅。 vertical portal 垂直门户 是相对新浪这样的传统门户网站而言， 传统门户网站的内容广泛而全面，覆盖各行各业，“垂直门户”则专注于某一领域（或地 域）如 IT、娱乐、体育、汽车，力求成为关心某一领域（或地域）内容的人上网的第一站 。 Dictionary 网址导航站 网址导航就是一个集合较多网址，并按照一定条件进行分类的一种网址站。网址导航方便网友们快速找到自己需要的网站，而不用去记住各类网站的网址，就可以直接进到所需的网站。现在的网址导航一般还自身提供常用查询工具，以及邮箱登陆、搜索引擎入口，有的还有热点新闻等功能。网址导航从诞生的那一刻起，就凭借其简单的模式和便利的服务 以及好的用户体验深得民心，不过也注定其发展与竞争都将成为互联网网站中竞争最激烈的类别，发展至今，更是成为互联网大佬们最大的竞争对象。 Search Engine 搜索引擎 可被搜索的网站及其内容数据库。搜索引擎一般通过搜索用户指定的关键词来帮助用户找 到他们所需要的信息。搜索引擎会提供一个网页的索引，供用户输入关键词或相关内容来 查询信息。创建索引时可以使用专门的资源列表，或者使用称为“机器人”的程序来自动 访问站点和网页 HTML 代码中的索引文本。 Social Media 社交媒体 也称为社会化媒体、社会性媒体，指允许人们撰写、分享、评价、讨论、相互沟通的网站和技术。所谓社交媒体应该是大批网民自发贡献，提取，创造新闻咨询，然后传播的过程 。 Streaming Media 数据流媒体 一种以稳定、持续的数据流来传输的技术。随着互联网的发展，数据流媒体已变得越来越重要。大多数用户无法足够快速地下载大型多媒体文件，利用数据流，用户在该文件完成下载之前即可开始在网上观赏或收听。 自媒体(外文名：We Media) 又称“公民媒体”或“个人媒体”，是指私人化、平民化、普泛化、自主化的传播 者,以现代化、电子化的手段，向不特定的大多数或者特定的单个人传递规范性及非规范性 信息的新媒体的总称。自媒体平台包括:博客、微博、微信、百度官方贴吧、论坛/BBS 等网络社区。 TMT 数字新媒体 或叫 TMT（Technology，Media，Telecom）产业。TMT 是电信、媒体和科 技三个英文单词的缩写的第一个字头，整合在一起，实际是未来电信、媒体科技(互联网) ，包括信息技术这样一个融合趋势所产生的大的背景，这就是 TMT 产业。 网络广告 Ad Network 在线广告网络 Ad Network 即“广告网络”。在广告业内，这是一个较为广泛的概念。是一种介于想出售广告 流量资源的网站与想在网站上刊登广告的广告主之间的平台。 Ad Server 广告管理系统 指为媒体提供的一套综合性广告发布系统，可以帮助媒体管理、优化其广告流量，简化广告管理及投放流程，提供全面的广告投放报告，制定高效的投放解决方案，提升广告价值。Display AD 展示广告网站广告的主要形式，通常在文本的基础上再加上图像型信息，其形式如企业标识、相关产品图片，企业所在位置的简易电子地图或其他相关信息。 品牌广告 以树立产品品牌形象，提高品牌的市场占有率为直接目的，突出传播品牌在消费者心目中确定的位置的一种方法。 效果广告 基于效果为基础的广告系统中，广告主只需要为可衡量的结果付费。 Banner 横幅广告 一种常见的网络广告形式，常表现为 GIF、JPG 等格式建立的图像文件，定位在网页中，大多用来表现广告内容，同时还可实用 Java 等语言使其产生交互性，用 Shockwave 等插件工具增强表现力。 Buttons 按钮 网站上一小块形似按钮的可点击区域，往往采用动画形式，并连接到广告主的网站。 Pop-up Ad 弹出式广告 在用户浏览网页或打开新网页时弹出的短暂的广告。在已经显示内容的页面上出现的具有独立广告内容的窗口，一般是网页内容下载完成弹出式广告也随之出现，因而对浏览网页内容产生直接影响。 Skyscraper 擎天柱广告 一种又高又窄的网络广告格式，通常位于网页左右两侧的狭窄空间。 Rich Media (富媒体) 这种应用采取了所有适合的最先进技术，以最好的传达广告主的信息， 甚至与用户进行互动，如视频、flash 广告等。 Keyword 关键字广告 用户输入到搜索引擎中用于搜索匹配和相关结果的单词或词语。 竞价排名 一种按效果付费的网络推广方式。基本特点是按点击付费，推广信息出现在搜索结果中（一般是靠前的位置），如果没有被用户点击，则不收取推广费。竞价就是拍卖 ，关键词出价是影响排名的一个重要因素。 AdWords Google 的关键词竞价广告。 Adsens Google AdSense 是一种获取收入的快速简便的方法，适合于各种规模的网站发布商。它可以在网站的内容 网页上展示相关性较高的 Google 广告，并且这些广告不会过分夸张醒目。 百度凤巢 百度的关键词竞价广告。 淘宝直通车 淘宝的关键词竞价广告。 钻石展位 是淘宝网图片类广告位竞价投放平台，是为淘宝卖家提供的一种营销工具。钻石展位依靠图片创意吸引买家点击，获取巨大流量。 积分墙广告 在一个应用内展示各种积分任务（下载安装推荐的优质应用、注册、填表等 ），以供用户完成任务获得积分的页面。是除“广告条”、“插屏广告”外，第三方移动广告平台提供给应用开发者的另一新型移动广告盈利模式。 Ad Exchange 广告交易平台 Ad Exchange 是针对每次广告展示，以受众为单位进行实时竞价的互联网流量交换市场。能帮助广告联盟、代理机构和第三方技术提供商通过实时竞价的方式购买众多互联网站点的广告资源。 DSP （Demand-Side Platform） 需求方平台 DSP 需求方平台是一个综合性管理平台，在这个平台上，广告主可以通过同一个界面管理多 个数字广告和数据交换的账户。利用 DSP，广告主可以在广告交易平台（Ad Exchange）对在线广告进行实时竞价（RTB Real-Time Bidding），高效管理广告定价，利用 DSP 也可以根据目标受众数据分析进行理性定价，就 像付费搜索的操作原理一样，在用户优化的基础上使用 DSP 设置如 CPC 和 CPA 这些关键性能指 标，从而达到理性定价的目 标。 DMP （Data-Management Platform） 数据管理平台 DMP 数据管理平台，是把分散的第一、第三方数据进行整合纳入统一的技术平台，并对这些数据进行标准化和细分，让用户可以把这些细分结果推向现有的互动营销环境里。 RTB （Real-Time Bidding） 实时竞价 RTB 实时竞价，是一种利用第三方技术在数以百万计的网站上针对每一个用户展示行为进行 评估以及出价的竞价技术。与大量购买投放频次不同，实时竞价规避了无效的受众到达， 只针对有意义的用户进行购买。它的核心是 DSP 平台（需求方平台）。 RTB 对于媒体来说，可以带来更多的广告销量、实现销售过程自动化及减低各项费用的支出 。而对于广告商和代理公司来说，最直接的好处就是提高了效果与投资回报率。 Media Plan 媒介计划 包含了传播目标，同时描述如何通过广告途径来实现这些目标的概述。它由媒介策划人员提供。媒介计划一般包括市场营销、广告投放以及媒介目标，相关的媒介策略通常在其基础上制定。 Campaign 广告活动 广告活动指在某一特定市场上为实现某一重大目标所集中进行的大规模的广告活动，是广 告决战思想的一种体现，是企业之间进行市场竞争的策略之一。 Landing Page 登陆页面 当用户点击了广告之后所访问的广告主网页。通常登陆页面会要求用户注册以便获得服务或购买产品，也称为点进 URL 或目标 URL。 Positioning 定位 投放广告的位置，可以指定广告出现的位置。 Targeted 针对性广告 通过分析人口特征、网络行为、消费习惯等制定的面向特定受众市场的广告 。 植入式广告 在电影或电视剧或者其它场景插入相关的广告。如变形金刚，非诚勿扰等。eCPM（effective cost per mille）指的就是每一千次展示可以获得的广告收入，展示的单位可以是网页，广告单元， 甚至是单个广告（在 AdSense “高级报告”的“数据展示依据”下拉框中可以选择）。默认情况下，eCPM 指的都是千次网页展示（Pageview）收入。eCPM 只是用来反映网站盈利能力的参数，不代表收入。 CPD （Cost Per Day） 每日成本，是按天收费的一种模式，是广告合作的一种常见方式。 CPM （Cost Per Mille 或者 Cost Per Thousand; Cost Per Impressions） 千人成本，指由某一媒介或媒介广告排期表所送达 1000 人所需的成本。其原始英文为 Cost Per Mille，简称 CPM。其计算公式为：千人成本=（广告费用/到达人数）×1000。目前，CPM已经作为&quot;按广告每千次被展现收费&quot;的广告模式,成为网络广告的基本术语。 CPC （Cost Per Click; Cost Per Thousand Click-Through ） 点击成本，以每点击一次计费。在这种模式下广告主仅为用户点击广告的行为付费，而不再为广告的显示次数付费。 CPA （Cost Per Action） 行动成本，每次行动的费用。即根据每个访问者对网络广告所采取的行动收费的定价模式，对于用户行为的定义，包括形成一次交易、获得一个注册用户、或者对网络广告的一次点击等。 CPE （Cost Per Engagement） 每参与成本，旨在评估用户与品牌之间参与程度的价值。多应用于社交媒体，例如链接点击、喜欢、转发和“@回复”等等。另外 CPE 也指用户浏览过广告后，在一定时间内（如一周）与品牌进行的互动。 CPS (Cost Per Sales =CPP Cost Per Purchase) 每购买成本，以实际销售产品数量来换算广告投放金额。广告主为规避风险，只有在用户点击广告并进行在线交易后，才支付广告费用。 网络营销推广 网络营销 以现代营销理论为基础，借助网络、通信和数字媒体技术实现营销目标的商务活动。企业网络营销包含企业网络推广和电子商务两大要素，网络推广就是利用互联网进行宣传推广活动，电子商务指的是利用简单、快捷、低成本的电子通讯方式，买卖双方无需谋面地进行各种商贸活动。 网络推广 通过互联网把产品或服务推广出去，使产品或服务增加曝光率，尽可能让更多的人知道。常见网络推广渠道有分类信息、问答、博客、论坛、视频网站等。 SEM 是“Search Engine Marketing”的缩写，意为“搜索引擎营销”。包含关键字广告和 SEO两大主要手段。 SEO 搜索引擎优化。搜索引擎优化（Search Engine Optimization，简称“SEO”），泛指为了提升网站在搜索引擎中的表现而采取的各种符合 必要的规则的手段和由此开展的各种工作。 EDM 内部邮件群发，第三方平台，数据库整合营销等方式，数据库营销。 社会化媒体营销 基于微博、微信、QQ、sns、bbs、博客等社交媒体来进行推销并创造业务机会和销售的行为。其最大的优势在于能够帮助企业推销，从而增加流量并建立新的业务合作关系。 口碑营销 企业在调查市场需求的情况下，为消费者提供需要的产品和服务，同时制定一定的口碑推广计划，让消费者自动传播公司产品和服务的良好评价，从而让人们通过口碑 了解产品、树立品牌、加强市场认知度，最终达到企业销售产品和提供服务的目的。 病毒式营销 是指通过用户的社会人际网络，使信息像病毒一样传播和扩散，利用快速复制 的方式传向数以千计、数以百万计的受众。也就是说，通过提供有价值的产品或服务，“ 让大家告诉大家”，通过别人为你宣传，实现“营销杠杆”的作用。 SMO （社交媒体优化）通过社会化媒体、在线组织及社区网站获得公共传播的一整套方法。SMO的方法包括添加 RSS 订阅、顶上去、博客写作及非合作形式的第三方社区功能（如：Flickr图片幻灯片、YouTube 的视频分享）。 ASO (App Store Optimization)就是提升你 APP 在各类 APP 电子市场排行榜和搜索结果排名的过程。类似移动 APP 的 SEO 优化。 饥饿营销 商品提供者有意调低产量，以期达到调控供求关系、制造供不应求“假象”、 维持商品较高售价和利润率，也达到维护品牌形象、提高产品附加值的目的。“饥饿营销 ”是把双刃剑，苹果公司的“可控泄漏”战略为其赢得了全球市场，而小米手机却也因过 分的“饥饿”让用户失去了耐心。 Interactive Marketing 互动营销通过互动营销能够向潜在客户进行推销并记住他们的行为和话语，从而使潜在客户知道广告主已了解其之前提供的信息。 SEO 相关 Meta 关键词密度 面包屑导航 内链 外链 反向链接 友情链接 锚文本 Home Page 主页 网站的第一张网页，是导航的起点。访问者可通过主页链接到站点内的其他页面。 SERP 搜索结果页面 SPAM 互联网上到处散布垃圾广告消息的现象。在搜索引擎上的 Spam 通常也称为作弊。搜索引擎营销中所说的 SPAM 是专门针对那些欺骗搜索引擎的信息。搜索引擎垃圾技术是利用不道德的技巧去提高自己搜索引擎上的排名。不诚实的网站管理员就是利用这样的手段去欺骗搜索引擎从而获得较高的排名。 PageRank PR 值 PR 值是网页的级别技术。取自 Google 的创始人 Larry Page，它是 Google 排名运算法则(排名公式)的一部分，用来标识网页的等级/重要性。级别 从 1 到 10 级，10 级为满分。PR值越高说明该网页越受欢迎(越重要)。 Alexa Alexa.com 是专门发布网站世界排名的网站，网站排名有两种：综合排名和分类排名。 沙盒 Google 反击垃圾网站的重要措施，出现在 2004 年，也就是举世瞩目的 Google 佛罗里达风暴和奥斯丁风暴之后的半年。有了沙盒，Google 仍然象过去一样迅速收录网站，从互联网上从新的网站里努力获取新鲜的信息，但是不再 象以前那样信任这些新网站。所有收录的网站都要经过“适用期”或者 “观察期”。经过时间的考验，如果这些网站能顺利通过 Google 多次的反“泛滥”过滤器(spam filter)的考验，最终这些网站就被放回搜索的“大海”之中，参与正常的排名竞赛之中。 这个过程少则两、三个月，长则要一年。新网站可以采取一些积极 的措施，争取早日走出沙盒。 技术及其他篇 技术 域名 由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。一个域名的目的是便于记忆和沟通的一组服务器的地 址（网站，电子邮件，FTP 等）。 服务器 是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。服务器的构成包括处理器、硬盘、内存 、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。在网络环境下， 根据服务器提供的服务类型不同，分为文件服务器，数据库服务器，应用程序服务器，WEB 服务器等。 虚拟主机 在网络服务器上分出一定的磁盘空间供用户放置站点、应用组件等，提供必要的站点功能、数据存放和传输功能。也叫“网站空间”，就是把一台运行在互联网上的服 务器划分成多个“虚拟”的服务器，每一个虚拟主机都具有独立的域名和完整的 Internet 服务器（支持WWW、FTP、E-mail 等）功能。 DNS （Domain Name System，域名系统），因特网上作为域名和 IP 地址相互映射的一个分布式数据库，能够使 用户更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。通过主机名，最 终得到该主机名对应的 IP 地址的过程叫做域名解析（或主机名解析）。 VPN （Virtual Private Network）VPN 网关通过对数据包的加密和数据包目标地址的转换实现远程访问。 FTP 文件传输协议。是一个用于在两台装有不同操作系统的机器中传输计算机文件的软件标准。它属于网络协议组的应用层。 SSL “Secure Socket Layer”，意为“安全套接层”，是一种加密通信技术，用于保证数据在网络上传输的安全 性，避免被截取、窃听和篡改。目前，SSL 被广泛地应用于 Web 浏览器与服务器之间的身份 认证和数据加密。 Load balancing（负载平衡） 在路由选择中，路由器在它所有的到目的端地址均是同样距离的 网络端口上分配业务量的能力。一个好的负载平衡算法使用线路速度和可靠性信息两者。负载平衡增加网段的使用率，从而增加有效的网络带宽。 HTTP 超文本传输协议，一种控制网络信息传输的协议，通常出现在地址栏或统一资源定位符的前面。 HTML 超文本标记语言，设计网页时实用的标准互联网编程语言。它使信息能够呈现所包含的指向其他相关文件的链接。 URL 统一资源定位符，指独一无二的互联网地址。 绝对URL 是指 Internet 上资源的完整地址，其形式通常如下：协议://主机名[/[路径/]资源 文件名] 相对 url 相对 URL 是指 Internet 上资源相对于当前页面的地址，它包含从当前页面指向目标页面的路径。当使用相对 URL 时，可以使用与 DOS 文件目录类似的特殊符号：点（.）和双点（…）， 分别表示当前目录和上一级目录。相对 URL 本身并不能唯一资源，但浏览器会根据当前页面的绝对 URL 正确理解相对 URL。 404 错误 HTTP 404 错误意味着链接指向的网页不存在，即原始网页的URL失效。 Cookie 一种由网站发出并存储在用户的硬盘内的文本文件，网站用它来储存/检索每个访问者的信息。Cookie 存储信息的范围从每个访问者唯一的单独编号一直到有关个人喜好的详细信息和用户提供的人口统计信息。一旦用户收到一个 Cookie，其中将包含该用户所做出的每个网页请求信息。这就使网站的日志文件能够跟踪每个访问者访问网站的活动。Cookie信息还可用于个性化提供给用户的内容，包括广告—— 某些广告滚动软件可以识别出用户刚刚看到过哪一个广告，然后将另一个不同的广告滚动 到下一个网页视图中送出。 Session 在计算机中，尤其是在网络应用中，称为“会话控制”。具体到 Web 中的 Session 指的就是用户在浏览某个网站时，从进入网站到关闭这个网站所经过的这段时间，也就是用户浏览这个网站所花费的时间。因此从上述的定义中我们可以看到，Session 实际上是一个 特定的时间概念。 CMS 内容管理系统。它具有许多基于模板的优秀设计，可以加快网站开发的速度和减少开发的成本。CMS 的功能并不只限于文本处理，它也可以处理图片、Flash 动画、声像流、图像甚至电子邮件档案。 开放平台 （Open Platform）在软件业和网络中，开放平台是指软件系统通过公开其应用程序编程接口（API ）或函数（function)来使外部的程序可以增加该软件系统的功能或使用该软件系统的资源 ，而不需要更改该软件系统的源代码。 API Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。 SDK （全称：Software Development Kit，软件开发工具包）一般都是一些软件工程师为特定的软件包、软件框架、硬件平台、 操作系统等建立应用软件时的开发工具的集合。软件开发工具包广义上指辅助开发某一类 软件的相关文档、范例和工具的集合。 Native app 而 App 因为位于平台层上方，向下访问和兼容的能力会比较好一些，可以支持在线或离线，消息推送或本地资源访问，摄像拨号功能的调取。但是由于设备碎片化，App 的开发成本要高很多，维持多个版本的更新升级比较麻烦，用户的安装门槛也比较高。但是比较乐观的是，App store 培养了一种比较好的用户付费模式，所以在 Apple 的生态圈里，开发者的盈利模式是一种明朗状态，其他 market 也在往这条路上靠拢。 Web app Web 无需安装，对设备碎片化的适应能力优于 App，它只需要通过 XHTML、CSS 和 JavaScript 就可以在任意移动浏览器中执行。随着 iPhone 带来的 WebKit 浏览体验升级，使得专为 iPhone 等有 WebKit 浏览内核的移动设备开发的 Web 应用，也有了如 App 一般流畅的用户体验。 Html5 HTML5 提供了一些新的元素和属性，例如（网站导航块）和。这种标签将有利于搜索引擎的索引整理，同时更好的帮助小屏幕装置和视障人士使用，除此之外，还为其他浏览要素提供了新的功能。 大数据 所涉及的资料量规模巨大到无法透过目前主流软件工具，在合理时间内达到撷取 、管理、处理、并整理成为帮助企业经营决策更积极目的的资讯。我国对大数据的搜集利 用主要体现在电子商务领域：电商通过物流掌握用户数据，进行线上线下联动；通过分析购买商品的数据，精确进行商品推荐等。 数据挖掘 一般是指从大量的数据中通过算法搜索隐藏于其中信息的过程。数据挖掘通常与 计算机科学有关，并通过统计、在线分析处理、情报检索、机器学习、专家系统（依靠过去的经验法则）和模式识别等诸多方法来实现上述目标。 机器学习 (Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多 门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新 组织已有的知识结构使之不断改善自身的性能。 它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域 ，它主要使用归纳、综合而不是演绎。 云存储 是在云计算(cloud computing)概念上延伸和发展出来的一个新的概念，是指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统。当云计算系统运算和处理的核心是大量数据的存储和管理时，云计算系统中就需要配置大量的存储设备，那么云计算系统 就转变成为一个云存储系统，所以云存储是一个以数据存储和管理为核心的云计算系统。 NFC （Near Field Communication，NFC），又称近距离无线通信，是一种短距离的高频无线通信技术，允许电子设备之间进行非接触式点对点数据传输（在十厘米内）交换数据。 RFID 射频识别即 RFID（Radio Frequency IDentification）技术，又称电子标签、无线射频识别，是一种通信技术，可通过无线电 讯号识别特定目标并读写相关数据，而无需识别系统与特定目标之间建立机械或光学接触 。 VR Virtual Reality 即虚拟现实（简称 VR），是由美国 VPL 公司创建人拉尼尔 Jaron Lanier，在 20 世纪 80 年代初提出的。其具体内涵是：综合利用计算机图形系统和各种现实及控制等接口设备，在计算机上生成的，可交互的三维环境中提供沉浸感觉的技术。其中，计算机生成的，可交互的三维环境成为虚拟环境，即 Virtual Environment（简称 VE），虚拟现实技术实现的载体是虚拟现实仿真平台，即 Virtual Reality Platform（简称 VRP）。 其他 SWOT 分析 用于对企业的市场地位进行评估的体系，包括优势、劣势、机遇和威胁。优势和劣势都是企业可以改变的内部因素。机遇和威胁则是企业无法控制但是又必须制定应对 措施的外部因素。 Prototype 产品原型 可以概括的说是整个产品面市之前的一个框架设计。以网站注册作为例子,整个前期的交互设计流程图之后,就是原形开发的设计阶段,简单的来说是将页面的模块、元素、人机交互的形式，利用线框描述的方法，将产品脱离皮肤状态下更加具体跟生动的进行表达。 Flow Chart 流程图 是流经一个系统的信息流、观点流或部件流的图形代表，使用图形表示算法的思路。 MRD 市场需求文档 是产品项目由“准备”阶段进入到“实施”阶段的第一文档，其作用就是 “对年度产品中规划的某个产品进行市场层面的说明”。 BRD 商业需求文档 是基于商业目标或价值所描述的产品需求内容文档（报告）。其核心的用途就是用于产品在投入研发之前，由企业高层作为决策评估的重要依据。其内容涉及市场分析，销售策略，盈利预测等，通常是供决策层们讨论的演示文档，一般比较短小精炼，没有产品细节。 PRD 产品需求文档 是产品项目由“概念化”阶段进入到“图纸化”阶段的最主要的一个文档，其作用就是“对MRD 中的内容进行指标化和技术化”。 AB 测试 本质上是个分离式组间实验，A/B 测试的目的在于通过科学的实验设计、采样样本代表性、流量分割与小流量测试等方式来获得具有代表性的实验结论，并确信该结论在推广 到全部流量可信。 灰度发布 是指在黑与白之间，能够平滑过渡的一种发布方式。AB test 就是一种灰度发布方式，让一部分用户继续用 A，一部分用户开始用 B，如果用户对 B 没 有什么反对意见，那么逐步扩大范围，把所有用户都迁移到 B 上面来。灰度发布可以保证整 体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。 快速检查清单 (Check list) 为了达到优化的目标，整理了一个简易的 checklist，方便在走查时对架构、布局、内容、行为四个方面对照检查。 FAQ 是英文 Frequently Asked Questions 的缩写，中文意思就是“经常问到的问题”，或者更通俗地叫做“常见问题解答 ”。 MVP（Minimum Viable Product – 最简化可实行产品） 一种产品理论，它的重点就是制作的成本要极低，但是却能展示最 终产品的主要特色。作用就是让你拿来接触客户，从很早就根据客户的回馈来改进你的产品。 职位、职业或部门相关 CEO 首席执行官 COO 首席运营官 CMO 首席市场官 CFO 首席财务官 VP 副总裁 PM 产品经理、项目经理 RD 研发 OP 运营 UI 设计 UED 用户体验 BD 商务拓展 AE 客户执行 PR 公关 HR 人力资源 HRD 人力资源总监 KA 大客户部门 Soho 即 Small Office Home Office，家居办公，大多指那些专门的自由职业者。 Geek 极客是一群以创新、技术和时尚为生命意义的人，这群人不分性别，不分年龄，共同的战斗在新经济、尖端技术和世界时尚风潮的前线，共同为现代的电子化社会文化做出自己的贡献。 淘宝客 是指基于阿里妈妈平台帮助卖家推广商品并获取佣金的人。淘宝客推广是一种按成 交计费的推广模式，淘宝客只要从淘宝客推广专区获取商品代码，布置到您要推广的地方，等买家（包括您自己）经过您的推广(链接、个人网站、博客或者社区发的帖子)进入淘 宝卖家店铺完成购买后，就可得到由卖家支付的佣金。 淘拍档 即淘宝网优质电子商务服务提供商，经过淘宝网从淘宝服务商中严格审核，他们被授予“淘拍档”称号，拥有“淘拍档”授牌。常用缩写 TP。 Aidma 模型 该法则于 1898 年由美国广告学家 E.S.刘易斯最先提出。A、I、D、M、A 的含义分别为：A(At tention)引起注意；I (Interest)产生兴趣；D(Desire)培养欲望；M(Memory)形成记忆；A(Action)促成行动。所谓 AIDMA 法则，是指在消费者从看到广告，到发生购物行为之间，动态式地引导其心理过 程，并将其顺序模式化的一种法则。 其过程是首先消费者，注意到(attention)该广告，其次感到兴趣(interest)而阅读下去，再者产生想买来试一试的欲望(desire)。然后记住 (memory)该广告的内容最后产生购买行为(action)。这种广告发生功效而引导消费者产生 的心理变化，就称为 AIDMA 法则。 长尾理论 网络时代兴起的一种新理论，由于成本和效率的因素，当商品储存流通展示的场地和渠道 足够宽广，商品生产成本急剧下降以至于个人都可以进行生产，并且商品的销售成本急剧 降低时，几乎任何以前看似需求极低的产品，只要有卖，都会有人买。这些需求和销量不高的产品所占据的共同市场份额，可以和主流产品的市场份额相比，甚至更大。 六度空间理论 又名“六度分割理论”、“小世界理论”等，起源于一个数学领域的猜想。该理论的核心是：你和任何一个陌生人之间所间隔的人不会超过六个，也就是说，最多通过六个人你就能够认识任何一个陌生人。 七次印象理论 广告学的一个理论，含义是：一个广告通常需要被目标受众反复看 7 次以后才能形成深刻稳定的印象（被人记住）。 该理论的主要应用场景：各类品牌广告。极端案例：著名的恒源祥恶搞广告事件。 八秒法则 网络营销领域的一个重要法则，主要原理为：着陆页的打开速度对访客的访问意愿具有较大的影响，如果能在 3 秒内打开，则访客的体验是良好的；如果超过 5 秒，则访客将产生焦 虑和烦躁的情绪；而 8 秒是多数访客忍耐的临界点，如果着陆页在 8 秒内没有完全打开，多数访客将直接关闭该网页（从而造成访客流失）。 避风港原则 避风港原则是互联网著作权领域的一个司法原则，最早来自美国 1998 年制定的《数字千年版权法案》（DMCA 法案）。它的含义是：发生著作权侵权案件时，如果 ISP（网络服务提供商）只提供空间服务，并不制作网页内容，那么当 ISP 被告知侵权时，有删除相关信息的义 务，否则就被视为侵权。如果侵权内容既不在 ISP 的服务器上存储，又没有被告知哪些内容应该删除，则 ISP 不承担侵权责任。后来避风港原则也被应用在搜索引擎、网络存储、在线图书馆等方面。避风港原则包括两 部分，“通知+移除”（notice－take down procedure）。由于网络中介服务商没有能力进行事先内容审查，一般事先对侵权信息的存在不知情。所以，采取“通知+移除”规则，是对网络中介服务商间接侵权责任的限制。 作者：Acelit 来源：CSDN 原文：https://blog.csdn.net/acelit/article/details/74357277 版权声明：本文为博主原创文章，转载请附上博文链接！","categories":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/categories/English/"}],"tags":[{"name":"英语","slug":"英语","permalink":"https://bobit.github.io/tags/英语/"},{"name":"转载","slug":"转载","permalink":"https://bobit.github.io/tags/转载/"}]},{"title":"乔布斯经典语录","slug":"English/乔布斯经典语录","date":"2018-06-02T01:00:10.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/57010d84.html","link":"","permalink":"https://bobit.github.io/posts/57010d84.html","excerpt":"","text":"乔布斯经典语录 作为苹果手机的创始人，乔帮主一定是很多年轻人心中的偶像。以下为乔布斯经典语录，看看乔帮主是如何一步一步走来的吧。 「最重要的，拥有跟随内心与直觉的勇气，你的内心与直觉多少已经知道你真正想要成为什么样的人。任何其他事物都是次要的。」 「你得找出你所热爱的，工作上是如此，人生伴侣也是如此。」 「Stay hungry,Stay foolish 求知若飢，虚心若愚 。」— —Steve Jobs I have looked in the mirror every morning and asked myself: If today were the last day of my life, would I want to do what I am about to do today? And whenever the answer has been No for too many days in a row, I know I need&quot; to change something. ——Steve Jobs If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. ——Steve J&quot; obs I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. ——Steve Paul Jobs 《Speech in Stanford》 keep hungry，keep foolish。。。。 ——乔布斯 stay hungry , stay foolish . 求知若饥，虚心若愚。 ——乔布斯 stay hungry,stay foolish. ——Steve Jobs We didn’t know much about each other twenty years ago. We were guided by our intuition; you swept me off my feet. It was snowing when we got married at the Ahwahnee… ——Steve Jobs Who are crazy enough to think that they can change the world,are the ones who do. ——Steve Jobs 毕加索曾说过：‘好的艺术家抄，伟大的艺术家偷。’ 我们从不为窃取奇思妙想而感到羞愧……我认为，令麦金托什电脑变得伟大的部分原因是，在它身上倾注心血的是音乐家、诗人、艺术家、动物学家和历史学家，而他们恰恰又是世界上最棒的电脑科 学 家。 ——史蒂夫· 乔布斯 成为墓地里最富有的人对我来说并不重要……夜晚上床时说我们做了件很棒的事情……这对我来说才是重要的。——史蒂夫·乔布斯 创新就是把各种事物整合到一起。 ——史蒂夫·乔布斯 《追随你的心》 对大多数人来说，为家里购置电脑的最不可抗拒的理由，将是把它接入一个全国范围的通讯网络。我们正处于一个真正重大突破的开始阶段，对大多数人而言都是如此——这一突破与电话一样意义重大。 ——史蒂夫·乔布斯 很多人这样问：“我想开一家公司，我该做什么?”而我提出的第一个问题是：“你所热爱的是什么?你开的公司想要做什么?”他们大都笑道：“不知道。”我给他们的建议是，去找份工作让自己忙碌起来，直到你找到答案为止。你必须对自己的想法充满热情，强烈感受到愿意为它冒险的 心情。 ——乔布斯 很多时候，真正重要的是跟随内心的直觉和勇气，这往往决定我们成为怎样的人，而其他的，都是次要的。 ——乔布斯 活着就是为了改变世界，难道还有其他原因吗? ——乔布斯 记着你总会死去，这是我知道的防止患得患失的最佳办法。赤条条来去无牵挂，还有什么理由不跟随你的心? 你的时间是有限的，因此不要把时间浪费在过别人的生活上。不要被教条所困，使自己的生活受限于他人的思想成果。最重要的是，要有勇气跟随 你 的内心与 直觉，它们 好歹已经知 道你真正想让自己成为什么。其他的，都是次要的。 ——乔布斯 牢记自己即将死去，这是我所知道的避免陷入患得患失困境的最好方法。你已经一无所有，就没有理由不听从自己的心声……求知若饥，虚心若愚。——史蒂夫·乔布斯 领袖和跟风者的区别就在于创新。 ——乔布斯 没有经验，你就永远不可能知道经验的价值，或者永远不可能知道如何正确地保有经验所创造的财富。 ——史蒂夫·乔布斯 《追随你的心》 明白自己想要的是什么，这是我们首先需要清楚的。而用正确的标准来判断大众是否也想得到他们想要的东西，这才是我们要擅长做的。这才是公司花钱请我们做的工作。这与流行文化无关，与愚弄大众也无关。 ——史蒂夫·乔布斯 《追随你的心》 你不可能充满预见地将生命的点滴串联起来;只有在你回头看的时候，你才会发现这些点点滴滴之间的联系。所以，你要坚信，你现在所经历的将在你未来的生命中串联起来。你不得不相信某些东西，你的直觉、命运、生活、因缘际会…正是这种信仰 让我 不会失 去希望，它让 我的人生变 得与众不同。 ——乔布斯 你不能预先把点点滴滴串在一起;唯有你在未来回顾时，你才是会明白那些点点滴滴是如何串在一起的 ——乔布斯 你憧憬未来的时候，不会去想着把所有的事联系起来;只有在回忆过去的时候，才会将这点点滴滴联系在一起。一定要相信，这些生活的点滴会在你未来的某一天产生联系。一定要相信：勇气、目标、生命、缘起……一切都不会令你失望，只会增加你的与 众不 同。 — —史蒂夫· 乔布斯 《追 随你的心》 你得相信某些东西——你的勇气、命运、生活、宿缘，诸如此类。这种方法从未令我失望，它使我的人生大不一样。 ——史蒂夫·乔布斯 你的时间有限，所以不要为别人而活。不要被教条所限，不要活在别人的观念里。不要让别人的意见左右自己内心的声音。最重要的是，勇敢的去追随自己的心灵和直觉，只有自己的心灵和直觉才知道你自己的真实想法，其他一切都是次要。你是否已经厌 倦了 为别人 而活?不要犹 豫，这是你 的生活，你拥有绝对的自主权来决定如何生活，不要被其他人的所作所为所束缚。给自己一个培养自己创造力的机会，不要害怕，不要担心。过自己选择的生活，做自己的老板! ——史蒂夫·乔布斯 你如果出色地完成了某件事，那你应该再做一些其他的精彩事儿。不要在前一件事上徘徊太久，想想接下来该做什么。 ——乔布斯 你如果做某件事情，效果非常好，那你就应该尝试一下其他有意义的事，不要长久地停留在一件事情上，要经常想想下一步应该做什么。 ——史蒂夫·乔布斯 《追随你的心》 你想用卖糖水来度过余生，还是想要一个机会来改变世界? ——乔布斯 你须寻得所爱。 ——史蒂夫·乔布斯 如果你很忙，除了你真的很重要以外，更可能的原因是：你很弱，你没有什么更好的事情去做，你生活太差不得不努力来弥补，或者你装作你很忙，让自己显得很重要。 ——乔布斯 如果你是个正在打造漂亮衣柜的木匠，你不会在背面使用胶合板，即使它冲着墙壁，没有人会看见。但你自己心知肚明，所以你依然会在背面使用一块漂亮的木料。为了能在晚上睡个安稳觉，美观和质量必须贯穿始终。 ——史蒂夫·乔布斯 时间宝贵，不要虚掷光阴过他人的生活，不要让周围的聒噪言论蒙蔽你内心的声音。 ——乔布斯 时间是有限的，所以不要把时间浪费在走别人的路上。 ——乔布斯 事情的胜败得失，我不是很在乎，我在乎的是我喜欢这份工作，乐于从事的这项事业。如果努力之后，我还是失败了，那我相信自己还会努力的。 ——史蒂夫·乔布斯 《追随你的心》 伟大的艺术品不必追随潮流，他本身就能引领潮流。 ——乔布斯 《乔布斯传》 我跟着我的直觉和好奇心走, 遇到的 很多东西,此后被证明是无价之宝。 ——乔布斯 我坚信，区分成功与不成功，一半的因素就是纯粹的毅力差别。 ——乔布斯 我们不做市场调查。我们不招收顾问……我们只想做出伟大的产品。 ——史蒂夫·乔布斯 我愿意用我所有的科技去换取和苏格拉底相处的一个下午。 ——乔布斯 向那些疯狂、特立独行、想法与众不同的家伙们致敬。或许他们在—些人看来是疯子，但却是我们眼中的天才。 ——史蒂夫·乔布斯 有时候，人生会用砖头打你的头。不要丧失信心。 你得找出你的最爱，工作上是如此，人生伴侣也如此。你的工作将占掉你人生的一大部分，唯一真正获得满足的方法就是做你相信是伟大的工作，而唯一做伟大工作的方法是爱你所做的事。如果你还没找到 这 些事，继 续找，别停 顿。 ——乔 布斯 在你生命的最初年中，你养成习惯;在你生命的最后年中，你的习惯决定了你。 ——乔布斯 只有疯狂到认为自己能改变世界的人，才能真正的改变世界. ——乔布斯 专注和简单一直是我的秘诀之一。简单可能比复杂更难做到：你必须努力厘清思路，从而使其变得简单。但最终这是值得的，因为一旦你做到了，便可以创造奇迹。 ——乔布斯 自由从何而来?从自信来，而自信则是从自律来!先学会克制自己，用严格的日程表控制生活，才能在这种自律中不断磨练出自信。自信是对事情的控制能力，如果你连最基本的时间都做控制不了，还谈什么自信? ——乔布斯 Your time is limited, so don’t waste it living someone else’s life…Have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary. ——乔布斯 把每一天都当成生命中的最后一天，你就会轻松自在。 变得卓越并不艰难。从现在开始尽自己最大能力去做，你会发现生活将给你惊人的回报。 不要被教条所限，要听从自己内心的声音，去做自己想做的事。 不要迷惑于表象而要洞察事务的本质，初学者的心态是行动派的禅宗。 不要欺骗别人，能被你骗到的都是相信你的人。 不要让别人的意见淹没了你内心的声音。 成功没有捷径。你必须把卓越转变成你身上的一个特质。最大限度地发挥你的天赋、才能、技巧，把其他所有人甩在你后面。 成就一番伟业的唯一途径就是热爱自己的事业。如果你还没能找到让自己热爱的事业，继续寻找，不要放弃。跟随自己的心，总有一天你会找到的。 成为卓越的代名词，很多人并不能适合需要杰出素质的环境。 创新就是把各种事物整合到一起。 创新无极限!只要敢想，没有什么不可能，立即跳出思维的框框吧。 创意产生自发的谈话和随机的讨论之中。 从不犯错意味着从来没有真正活过。 从来没有哪个成功的人没有失败过或者犯过错误，相反，成功的人都是犯了错误之后，做出改正，然后下次就不会再错了，他们把错误当成一个警告而不是万劫不复的失败。 带着责任感生活，尝试为这个世界带来点有意义的事情，为更高尚的事情做点贡献。这样你会发现生活更加有意义，生命不再枯燥。 佛教中有一句话：初学者的心态;拥有初学者的心态是件了不起的事情。 给自己一个培养自己创造力的机会，不要害怕，不要担心。过自己选择的生活，做自己的老板! 过去十年中，大量的理论研究表明，电视对人的精神和心智是有害的。 活着就是为了改变世界，难道还有其他原因吗? 即使最想到达天堂的人，也不想通过死亡到达天堂。 记住你即将死去!不要为别人而活! 谨记自己总会死去，是让自己避免陷入“人生有所失”思考的最佳方法。 苦行和极简让人更加敏锐，匮乏既是富足，自律产生喜悦!要明白一个大多数人不知道的道理：物极必反! 领袖和跟风者的区别就在于创新。 没有传统艺术的科技是没有灵魂的，没有现代科技的艺术是没有未来的。 没有经验，你就永远不可能知道经验的价值，或者永远不可能知道如何正确地保有经验所创造的财富。 你必须努力理顺你的思维，才能使其简单明了。 你不能预先把点点滴滴串在一起;唯有你在未来回顾时，你才是会明白那些点点滴滴是如何串在一起的。 你不能只问顾客要什么，然后想法子给他们做什么。等你做出来，他们已经另有新欢了。 你不需要任何权威来评断你的使命，没有任何老板、老师、父母、牧师以及任何权威可以帮你来决定。你需要靠你自己来寻找这个独特的使命。 你的时间是有限的，所以不要浪费时间活在别人的生命中。 你的时间有限，所以不要为别人而活。不要被教条所限，不要活在别人的观念里。不要让别人的意见左右自己内心的声音。 你即将一无所有，你没有理由不去跟随你的心。 你如果出色地完成了某件事，那你应该再做一些其他的精彩事儿。不要在前一件事上徘徊太久，想想接下来该做什么。 你如果做某件事情，效果非常好，那你就应该尝试一下其他有意义的事，不要长久地停留在一件事情上，要经常想想下一步应该做什么。 你是否已经厌倦了为别人而活?不要犹豫，这是你的生活，你拥有绝对的自主权来决定如何生活，不要被其他人的所作所为所束缚。 你是否知道在你的生命中，有什么使命是一定要达成的?你知不知道在你喝一杯咖啡或者做些无意义事情的时候，这些使命又蒙上了一层灰尘? 你唯一要做的是，把你的特质发挥的淋漓尽致，把对手远远的抛在后面。 你想用卖糖水来度过余生，还是想要一个机会来改变世界? 你须寻得你所爱，并为之守望。 你只活一次。使它有意义。 请遵从你内心的声音，它们已经知道你想成为什么样的人。 求知若饥，虚心若愚。 去寻找一个能给你的生命带来意义、价值和让你感觉充实的事业。 人生短暂，过着过着你就没了，明白么? 人生中最重要的决定不是你做什么，而是你不做什么。 任何东西从后往前看，都可以找到联系，从前往后看找不到学习的意义。 如果你处于一个日渐萎缩的行业，那么赶紧在自己变得跟不上时代之前抽身而出，去换个工作或者转换行业。 如果你一定要用幻灯片，那说明你不知道自己要讲什么。 如果你正处于一个上升的朝阳行业，那么尝试去寻找更有效的解决方案：更招消费者喜爱、更简洁的商业模式。 如果我们认真地聆听，无论是对自己还是对其他人，就可以让我们内心深处真实的东西浮现出来。 生命短促，人一辈子没法做太多事情，所以每件事都要做的精彩绝伦。 生命短暂，你得找到你的最爱，你得有勇气跟著自己的直觉。 时间宝贵，不要虚掷光阴过他人的生活，不要让周围的聒噪言论蒙蔽你内心的声音。 是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。 死亡很可能是唯一的、最好的生命创造。它是生命的促变者。它送走老一代，给新一代开出道路。 死亡就是生命中最好的一个发明。 所谓初学者的心态是指，不要无端猜测、不要期望、不要武断也不要偏见。初学者的心态正如一个新生儿面对这个世界一样，永远充满好奇、求知欲、赞叹。 伟大的艺术品不必追随潮流，他本身就能引领潮流。 我并不是贬低高等教育的价值，我只是说，接受高等教育会付出代价，那就是生活经验的欠缺。 我坚信，区分成功与不成功，一半的因素就是纯粹的毅力差别。 我们认为看电视的时候，人的大脑基本停止工作，打开电脑的时候，大脑才开始运转。 我们生来就随身带着一件东西，这件东西指示着我们的渴望、兴趣、热情以及好奇心，这就是使命。 我有过很幸运的事业，有过很幸运的人生，我已经做了我能做的。 我愿意用我所有的科技去换取和苏格拉底相处的一个下午。 物质只把生活填满而不使之充实。 向那些疯狂、特立独行、想法与众不同的家伙们致敬。或许他们在—些人看来是疯子，但却是我们眼中的天才。 需要我们去做的事情很多。告诉其他人你的计划，不要鼓吹，也不要自以为是，更不能盲目狂热，那样只会把人们吓跑，当然，你也不要害怕成为榜样，要抓住出头的机会让人们知道你的所作所为。 要避免对物质的执着。我们的消费欲望是不健康的，要过一种不执着、非物质的生活以达到觉醒 要有勇气追随心声，听从直觉，它们在某种程度上知道你想成为的样子。其他事情都是其次的。 一切都简化了，这正是我所追求的，既专注，又简单。 一生中要做的事很多，而现在我们选择了这一件，那就让我们把它做成经典。 拥有使命感和目标感才能给生命带来意义、价值和充实。 勇敢的去追随自己的心灵和直觉，只有自己的心灵和直觉才知道你自己的真实想法，其他一切都是次要。 在每周一的早上，你能不能利索的爬起来并且对工作日充满期待?如果不能，那么你得重新去寻找。你会感觉得到你是不是真的找到了。 在你生命的最初年中，你养成习惯;在你生命的最后年中，你的习惯决定了你。 只有疯狂到认为自己能改变世界的人，才能真正的改变世界。 简介 史蒂夫·乔布斯(英语原名：Steven Paul Jobs，史蒂芬·保罗·乔布斯，简称为史蒂夫·乔布斯，Steve Jobs，1955年2月24日 — 2011年10月5日)，美国商业巨子及发明家。1976年，他制造了世界最早的商业化个人电脑，是苹果公司的创办人之一，并曾任苹果公司的董事会主席、首席运行官，同时也是前皮克斯动画工作室的董事长及首席执行官。 生于美国，旧金山，苹果公司联合创办人。1976年乔布斯和朋友成立苹果电脑公司，1985年在苹果高层权力斗争中离开苹果并成立了NeXT公司，1997年回到苹果接任行政总裁，2011年8月24日辞去苹果公司行政总裁职位，2011年10月5日因胰腺癌逝世。乔布斯让苹果产品引领全球科技潮流，2012年8月21日，苹果以市值6235亿美元成为世界市值第一的上市公司。史蒂夫·乔布斯世界著名发明家、企业家、美国苹果公司联合创办人、前行政总裁。1976年4月1日乔布斯和朋友斯蒂夫·沃兹尼亚克和Ron Wayn成立苹果公司，他陪伴了苹果公司数十年的起落与复兴，先后领导和推出了麦金塔计算机、iMac、iPod、iPhone、iPad等风靡全球亿万人的电子产品，深刻地改变了现代通讯、娱乐乃至生活的方式。2011年10月5日他因病逝世，享年56岁。乔布斯是改变世界的天才，他凭敏锐的触觉和过人的智慧，勇于变革，不断创新，引领全球资讯科技和电子产品的潮流。 乔布斯简介 1955年2月24日，乔布斯生于美国旧金山。 1972年毕业于加利福尼亚州洛斯阿图斯的Homestead高中，后入读俄勒冈州波特兰的里德学院，六个月后退学。 1976年，乔布斯与斯蒂夫·沃兹尼亚克成立苹果公司。 1985年，乔布斯获得了由里根总统授予的国家级技术勋章。 1997年，成为《时代周刊》的封面人物;同年被评为最成功的管理者，是声名显赫的“计算机狂人”。 2007年，史蒂夫·乔布斯被《财富》杂志评为了年度最有影响力的商人(most powerful businessman-Fortune[4])。 2009年，被财富杂志评选为这十年美国最佳行政总裁，同年当选《时代周刊》年度风云人物之一。 乔布斯的生涯极大地影响了硅谷风险创业的传奇，他将美学至上的设计理念在全世界推广开来。他对简约及便利设计的推崇为他赢得了许多忠实追随者。乔布斯与沃兹尼亚克共同使个人计算机在70年代末至八十年代初流行开来，他也是第一个看到鼠标的商业潜力的人。 1985年，乔布斯在苹果高层权力斗争中离开苹果并成立了NeXT公司，瞄准专业市场。 1997年，苹果收购NeXT，乔布斯回到苹果接任行政总裁(CEO)。 2011年8月24日，乔布斯辞去苹果公司行政总裁职位。 2011年10月5日逝世，终年56岁。","categories":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/categories/English/"}],"tags":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/tags/English/"}]},{"title":"IT界那些朗朗上口的“名言”","slug":"English/IT界那些朗朗上口的“名言”","date":"2018-06-01T01:00:10.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/b623eeb7.html","link":"","permalink":"https://bobit.github.io/posts/b623eeb7.html","excerpt":"","text":"互联网公司里头的名言，凝聚了很多公司价值观和做事的方法，对于很多人来说，其影响潜移默化。 这里收集了一些，如下： Stay hungry Stay foolish 求知若饥,虚心若愚 乔帮主在2005年给斯坦福大学做毕业演讲中提到过的他最喜欢的一句话。 You build it, You run it. Amazon 的 CTO：Werner Vogels 的名言。是相对传统应用开发模式提出来的，在微服务架构里头特别受欢迎。 Talk is cheap. Show me the code. 能说算不上什么，有本事就把你的代码给我看看 Linux 的创始人 Linus Torvalds 在 2000-08-25 给linux-kernel 邮件列表的一封邮件提到的 go big or go home 要么牛逼，要么滚蛋 facebook 的办公室标语 done is better than perfect 完成比完美更好 facebook 的办公室标语 Eating our own dog food 吃我们自己的狗食 微软公司让“吃我们自己的狗食”这句话变得人尽皆知","categories":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/categories/English/"}],"tags":[{"name":"English","slug":"English","permalink":"https://bobit.github.io/tags/English/"}]},{"title":"Struts2 相关问题","slug":"Q2A/q2a-struts2","date":"2017-11-06T14:18:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/979a26f7.html","link":"","permalink":"https://bobit.github.io/posts/979a26f7.html","excerpt":"","text":"The Struts dispatcher cannot be found 问题描述 org.apache.jasper.JasperException: The Struts dispatcher cannot be found，具体的异常如下： [java] view plain copy he Struts dispatcher cannot be found. This is usually caused by using Struts tags without the associated filter. Struts tags are only usable when the request has passed through its servlet filter, which initializes the Struts dispatcher needed for this tag. - [unknown location] at org.apache.struts2.views.jsp.TagUtils.getStack(TagUtils.java:60) at org.apache.struts2.views.jsp.StrutsBodyTagSupport.getStack(StrutsBodyTagSupport.java:44) at org.apache.struts2.views.jsp.ComponentTagSupport.doStartTag(ComponentTagSupport.java:48) at org.apache.jsp.chapter3test.register_jsp._jspx_meth_s_005fform_005f0(register_jsp.java:109) at org.apache.jsp.chapter3test.register_jsp._jspService(register_jsp.java:79) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:384) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:228) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:216) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11ProtocolHttp11ConnectionHandler.process(Http11Protocol.java:634)atorg.apache.tomcat.util.net.JIoEndpointHttp11ConnectionHandler.process(Http11Protocol.java:634) at org.apache.tomcat.util.net.JIoEndpointHttp11ConnectionHandler.process(Http11Protocol.java:634)atorg.apache.tomcat.util.net.JIoEndpointWorker.run(JIoEndpoint.java:445) at java.lang.Thread.run(Thread.java:595) 解决方案 这个异常。根据异常的提示是指Struts的过滤器不能被找到，解决该异常的方法是： 在web.xml文件中添加一个过滤设置： struts2 *.jsp 即可 com.opensymphony.xwork2.inject.DependencyException 问题描述 com.opensymphony.xwork2.inject.DependencyException: com.opensymphony.xwork2.inject.ContainerImpl$MissingDependencyException: No mapping found for dependency [type=com.opensymphony.xwork2.ObjectFactory, name=‘default’] in public void com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.setObjectFactory(com.opensymphony.xwork2.ObjectFactory). at com.opensymphony.xwork2.inject.ContainerImpl.addInjectorsForMembers(ContainerImpl.java:157) 解决方案 &lt;init-param&gt; &lt;param-name&gt;config&lt;/param-name&gt; &lt;param-value&gt;/configs/struts2/struts.xml&lt;/param-value&gt; &lt;/init-param&gt; 修改为： &lt;init-param&gt; &lt;param-name&gt;config&lt;/param-name&gt; &lt;param-value&gt;struts-default.xml,struts-plugin.xml,/configs/struts2/struts.xml&lt;/param-value&gt; &lt;/init-param&gt; struts2 修改配置文件的默认位置报异常的解决方法 异常: com.opensymphony.xwork2.inject.ContainerImpl$MissingDependencyException: No mapping found for dependency [type=com.opensymphony.xwork2.ObjectFactory, name=‘default’] in public void com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.setObjectFactory(com.opensymphony.xwork2.ObjectFactory). - Class: com.opensymphony.xwork2.inject.ContainerImpl File: ContainerImpl.java 解决方法: struts2 org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter config struts-default.xml,struts-plugin.xml,struts2/struts-*.xml 即,必须添加struts-default.xml(必须),struts-plugin.xml(可选)二个额外的配置文件. 原因: struts-default.xml是默认配置文件,一些必须的框架参数都默认设置在此. The Struts dispatcher cannot be found 描述 利用Struts2进行开发，当访问某个jsp页面时我们可能会遇到： org.apache.jasper.JasperException: The Struts dispatcher cannot be found，具体的异常如下： [java] view plain copy he Struts dispatcher cannot be found. This is usually caused by using Struts tags without the associated filter. Struts tags are only usable when the request has passed through its servlet filter, which initializes the Struts dispatcher needed for this tag. - [unknown location] at org.apache.struts2.views.jsp.TagUtils.getStack(TagUtils.java:60) at org.apache.struts2.views.jsp.StrutsBodyTagSupport.getStack(StrutsBodyTagSupport.java:44) at org.apache.struts2.views.jsp.ComponentTagSupport.doStartTag(ComponentTagSupport.java:48) at org.apache.jsp.chapter3test.register_jsp._jspx_meth_s_005fform_005f0(register_jsp.java:109) at org.apache.jsp.chapter3test.register_jsp._jspService(register_jsp.java:79) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:384) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:228) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:216) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11ProtocolHttp11ConnectionHandler.process(Http11Protocol.java:634)atorg.apache.tomcat.util.net.JIoEndpointHttp11ConnectionHandler.process(Http11Protocol.java:634) at org.apache.tomcat.util.net.JIoEndpointHttp11ConnectionHandler.process(Http11Protocol.java:634)atorg.apache.tomcat.util.net.JIoEndpointWorker.run(JIoEndpoint.java:445) at java.lang.Thread.run(Thread.java:595) 解决 这个异常。根据异常的提示是指Struts的过滤器不能被找到，解决该异常的方法是： 在web.xml文件中添加一个过滤设置： struts2 *.jsp 即可","categories":[{"name":"Q2A","slug":"Q2A","permalink":"https://bobit.github.io/categories/Q2A/"}],"tags":[{"name":"Struts2","slug":"Struts2","permalink":"https://bobit.github.io/tags/Struts2/"}]},{"title":"Spring 相关问题","slug":"Q2A/q2a-spring","date":"2017-11-05T14:18:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/3fb98eae.html","link":"","permalink":"https://bobit.github.io/posts/3fb98eae.html","excerpt":"","text":"WebApplicationContext: initialization started 问题描述 2016-03-23 16:57:53,549 INFO [org.springframework.web.context.ContextLoader] - Root WebApplicationContext: initialization started 2016-03-23 16:57:53,662 INFO [springframework.web.context.support.XmlWebApplicationContext] - Refreshing Root WebApplicationContext: startup date [Wed Mar 23 16:57:53 CST 2016]; root of context hierarchy 2016-03-23 16:57:53,715 INFO [springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from class path resource [applicationContext.xml] 2016-03-23 16:57:53,814 INFO [springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from class path resource [configs/service-context.xml] 2016-03-23 16:57:53,957 INFO [springframework.beans.factory.config.PropertyPlaceholderConfigurer] - Loading properties file from class path resource [configs/properties/database.properties] 2016-03-23 16:57:54,288 INFO [com.alibaba.druid.pool.DruidDataSource] - {dataSource-1} inited 2016-03-23 16:57:54,289 WARN [springframework.web.context.support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘druidDataSource’ defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: illegal maxActive 3 2016-03-23 16:57:54,292 ERROR [org.springframework.web.context.ContextLoader] - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘druidDataSource’ defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: illegal maxActive 3 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) at org.springframework.beans.factory.support.AbstractBeanFactory1.getObject(AbstractBeanFactory.java:306)atorg.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)atorg.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)atorg.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)atorg.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)atorg.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:838)atorg.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)atorg.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:446)atorg.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:328)atorg.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)atorg.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4939)atorg.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434)atorg.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)atorg.apache.catalina.core.StandardContext.reload(StandardContext.java:3954)atorg.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:426)atorg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1345)atorg.apache.catalina.core.ContainerBase1.getObject(AbstractBeanFactory.java:306) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:838) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:446) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:328) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4939) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3954) at org.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:426) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1345) at org.apache.catalina.core.ContainerBase1.getObject(AbstractBeanFactory.java:306)atorg.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)atorg.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)atorg.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)atorg.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)atorg.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:838)atorg.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)atorg.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:446)atorg.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:328)atorg.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)atorg.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4939)atorg.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434)atorg.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)atorg.apache.catalina.core.StandardContext.reload(StandardContext.java:3954)atorg.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:426)atorg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1345)atorg.apache.catalina.core.ContainerBaseContainerBackgroundProcessor.processChildren(ContainerBase.java:1530) at org.apache.catalina.core.ContainerBaseContainerBackgroundProcessor.processChildren(ContainerBase.java:1540)atorg.apache.catalina.core.ContainerBaseContainerBackgroundProcessor.processChildren(ContainerBase.java:1540) at org.apache.catalina.core.ContainerBaseContainerBackgroundProcessor.processChildren(ContainerBase.java:1540)atorg.apache.catalina.core.ContainerBaseContainerBackgroundProcessor.processChildren(ContainerBase.java:1540) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1519) at java.lang.Thread.run(Thread.java:724) Caused by: java.lang.IllegalArgumentException: illegal maxActive 3 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:532) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1706) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1645) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) … 23 more 解决方案 maxActive 设置3，太小 其中三个重要个几个属性是： MaxActive: 可用连接实例的最大数目，为负值时没有限制。 MaxIdle: 空闲连接实例的最大数目，为负值时没有限制。Idle的实例在使用前，通常会通过org.apache.commons.pool.BasePoolableObjectFactory的activateObject()方法使其变得可用。 MaxWait: 等待可用连接的最大数目，单位毫秒（million seconds）。 （注:pool.getResource()方法实际调用的GenericObjectPool类borrowObject()方法，该方法会根据MaxWait变量值在没有可用连接（idle/active)时阻塞等待知道超时，具体含义参看api。） 也就是说当连接池中没有active/idle的连接时，会等待maxWait时间，如果等待超时还没有可用连接，则抛出Could not get a resource from the pool异常。所以为避免这样的错误， 我们应该根据程序实际情况合理设置这三个参数的值，同时在我们获取一个连接的程序方法中也应该合理的处理这个异常，当没有连接可用时，等待一段时间再获取也许是个比较好的选择。","categories":[{"name":"Q2A","slug":"Q2A","permalink":"https://bobit.github.io/categories/Q2A/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://bobit.github.io/tags/Spring/"}]},{"title":"Maven 相关问题","slug":"Q2A/q2a-maven1","date":"2017-11-04T14:18:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/fda29c90.html","link":"","permalink":"https://bobit.github.io/posts/fda29c90.html","excerpt":"","text":"描述 maven-dependency-plugin (goals “copy-dependencies”,“unpack”) is not supported by m2e 解决 增加 org.eclipse.m2e lifecycle-mapping 1.0.0 org.apache.maven.plugins maven-dependency-plugin [2.0,) copy-dependencies 或 install 然后clean target 目录下生产目录即可。 或 E:\\Workspaces\\STS.metadata.plugins\\org.eclipse.m2e.core.ui/lifecycle-mapping-metadata.xml","categories":[{"name":"Q2A","slug":"Q2A","permalink":"https://bobit.github.io/categories/Q2A/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://bobit.github.io/tags/Maven/"}]},{"title":"Java 相关问题","slug":"Q2A/q2a-java","date":"2017-11-02T14:18:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/1689de73.html","link":"","permalink":"https://bobit.github.io/posts/1689de73.html","excerpt":"","text":"javax.servlet.http.HttpServletRequest.isAsyncStarted() 问题描述 jetty 9 嵌入式开发时，启动正常，但是页面一浏览就报错如下： java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.isAsyncStarted()Z 原因：jetty 9 依赖的servlet-api是3.X版本，如果项目中还有其它第3方开源库隐式依赖了2.x版本的servlet-api，就会报这个错。 解决办法：gradle项目中，gradle dependencies 分析所有的依赖项，找出依赖低版本servlet-api的项目，将其移除即可。 解决方案 错误原因：jetty 的版本和servlet—api版本不同，加载时的顺序不同，先加载servlet-api，而造成的错误。 解决方案： 1、如果是使用的是maven的话，在pom文件中，将jetty的jar包的依赖放在servlet-api的依赖前面 2、如果没有使用maven的话，可以在java build bath-&gt;order and export 将jetty的包上移 完整报错日志： 2014-09-15 01:49:15.572:WARN:oejs.ServletHandler:qtp968838231-22: Error for /myapp/index.jsp java.lang.NoSuchMethodError: javax.servlet.ServletContext.getJspConfigDescriptor()Ljavax/servlet/descriptor/JspConfigDescriptor; at org.apache.jasper.compiler.JspConfig.processWebDotXml(JspConfig.java:106) at org.apache.jasper.compiler.JspConfig.init(JspConfig.java:196) at org.apache.jasper.compiler.JspConfig.findJspProperty(JspConfig.java:259) at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:166) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:451) at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:625) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:375) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:473) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:377) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:738) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:551) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:568) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1111) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:478) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1045) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) at org.eclipse.jetty.server.Server.handle(Server.java:462) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:279) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:232) at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:534) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:607) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:536) at java.lang.Thread.run(Thread.java:744) 2014-09-15 01:49:15.574:WARN:oejut.QueuedThreadPool:qtp968838231-22: java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.isAsyncStarted()Z at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:648) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:568) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1111) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:478) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1045) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) at org.eclipse.jetty.server.Server.handle(Server.java:462) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:279) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:232) at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:534) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:607) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:536) at java.lang.Thread.run(Thread.java:744) Syntax error on token “enum”, delete this token 问题描述 我定义了一个Enumeration类型的变量enum， Enumeration enum = ………… 但是eclipse报错： Multiple markers at this line Enumeration cannot be resolved Syntax error on token “enum”, delete this token 我的jdk和jre都是1.5.0_11 解决方案 在jdk中不可以用enum作为变量名，因为它在1.5以后是一个关键字 Remove @Override annotation 问题描述 Remove @Override annotation错误 解决方案 第一种解决方案： @Override是JDK5 就已经有了，但有个小小的Bug，就是不支持对接口的实现，认为这不是Override 而JDK6 修正了这个Bug，无论是对父类的方法覆盖还是对接口的实现都可以加上@Override 修改你的eclipse指定的编译器版本 在选项里的java compiler中指定版本至少在5.0以上 在myEclipse中改变编译器的方法：Project-&gt;Properties-&gt;Java Compiler-&gt;Configure Workspace Setting，在弹出的页面中可以进行设置。 这个来自于：http://blog.csdn.net/CodeJoker/archive/2009/07/02/4317361.aspx 第二种解决方案：（我使用这种方法，没有问题） 在JAVA 1.5和1.6中@override的用法是有些区别的，虽然改变了JRE但eclipse还是会报错。 解决办法：Windows-&gt;Preferences–&gt;java-&gt;Compiler–&gt;compiler compliance level设置成6.0就OK了. 注意： 但是在导入一个工程时，编译并打包到Tomcat后，发现出现java.lang.UnsupportedClassVersionError: Bad version number in .class file异常，检查了一下我的myEclipse，我发现我的eclipse的compiler的jdk版本，tomcat所用的jdk版本不一致，后来设置成一致就可以了。看来果然是这个问题引起。 那次在Linux上部署工程时也出现过因为版本不同引起的问题，那时我们用的IDE的编译器是JDK5.0，而那台Linux装的是JDK6.0，部署后发现很多功能都出错，看来有些东西还是注意一下啊。 附，在myEclipse中改变编译器的方法：Project-&gt;Proper的ties-&gt;Java Compiler-&gt;Configure Workspace Setting，在弹出的页面中可以进行设置 其实这种方式与第二种差不多，殊途同归。第一种方式重点是设置这一个项目。而第二种重点设置所以项目。不过都可以用。","categories":[{"name":"Q2A","slug":"Q2A","permalink":"https://bobit.github.io/categories/Q2A/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://bobit.github.io/tags/Java/"}]},{"title":"Hibernate 相关问题","slug":"Q2A/q2a-hibernate1","date":"2017-11-01T14:18:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/1a3cd81d.html","link":"","permalink":"https://bobit.github.io/posts/1a3cd81d.html","excerpt":"","text":"Session was already closed 问题描述 org.hibernate.SessionException: Session was already closed at org.hibernate.internal.SessionImpl.close(SessionImpl.java:359) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.hibernate.context.internal.ThreadLocalSessionContextTransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:356)atcom.sun.proxy.TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:356) at com.sun.proxy.TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:356)atcom.sun.proxy.Proxy6.close(Unknown Source) at com.demo.dao.hibernate.BaseHibernateTest.destroy(BaseHibernateTest.java:43) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) 解决方案 org.hibernate.SessionException: Session was already closed异常解决办法 Hibernate如果获取session的方法是openSession(),关闭session的时候必须是session.close(),如果session获取通过getCurrentSession()获得的Session提交时自动关闭，其不用在session.close(),如果在调用session.close().其相当于session关闭两次 所以会出现Session was already closed异常 Could not obtain transaction-synchronized Session for current thread 问题描述 org.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread at org.springframework.orm.hibernate4.SpringSessionContext.currentSession(SpringSessionContext.java:134) at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014) at com.iwt.modules.weixin.biz.impl.ClockImpl.getClockByName(ClockImpl.java:85) at com.iwt.modules.weixin.process.ReceiveXmlProcess.getRespContent_Event_Type_Click(ReceiveXmlProcess.java:83) at com.iwt.modules.weixin.service.WeixinController.doPost(WeixinController.java:139) at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041) at org.apache.coyote.AbstractProtocolAbstractConnectionHandler.process(AbstractProtocol.java:603)atorg.apache.tomcat.util.net.JIoEndpointAbstractConnectionHandler.process(AbstractProtocol.java:603) at org.apache.tomcat.util.net.JIoEndpointAbstractConnectionHandler.process(AbstractProtocol.java:603)atorg.apache.tomcat.util.net.JIoEndpointSocketProcessor.run(JIoEndpoint.java:310) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724) 解决方案 因为使用了如下代码： Session session = sessionFactory.getCurrentSession(); Criteria c = session.createCriteria(Wx_punch_clock.class); c.add(Restrictions.eq(“name”, fromUserName)); // 数据列表循环 for (Object o : c.list()) { Wx_punch_clock t = (Wx_punch_clock) o; System.out.println(t.toString()); System.out.println(t.getId() + “-” + t.getName()); } // return c.list(); return “success”; 在web.xml中增加了filter就可以了。也许你的问题不是这个，但我的这个问题是这么解决的。 SpringOpenSessionInViewFilter org.springframework.orm.hibernate4.support.OpenSessionInViewFilter SpringOpenSessionInViewFilter /* 后发现hibernate4不支持getCurrentSession()这个方法 于是改成openSession()解决问题 JDBC begin failed 问题描述 javax.servlet.ServletException: org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is org.hibernate.TransactionException: JDBC begin failed: root cause org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is org.hibernate.TransactionException: JDBC begin failed: 解决方案 给jdbc url 增加 autoReconnect=true 一定能解决你的问题，可以定期观察一下 show processlist 改进方法如下： 寻找支持重连的连接池。 注意：c3p0连接池支持重连;重连参数是: idleConnectionTestPeriod 设置空闲连接测试周期 preferredTestQuery : 设置一查询语句，用于重连测试 testConnectionOnCheckin设置为true testConnectionOnCheckout设置为true 在sessionFactory里配置： true No CurrentSessionContext configured! 问题描述 org.hibernate.HibernateException: No CurrentSessionContext configured! at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1012) at com.demo.dao.hibernate.BaseHibernateTest.init(BaseHibernateTest.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) java.lang.NullPointerException at com.demo.dao.hibernate.BaseHibernateTest.destroy(BaseHibernateTest.java:42) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) 解决方案 添加本地事务 &lt;!-- 如果使用currentSession需要在hibernate.cfg.xml文件中进行配置： --&gt; &lt;!-- 如果是本地事务（jdbc事务） --&gt; &lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;","categories":[{"name":"Q2A","slug":"Q2A","permalink":"https://bobit.github.io/categories/Q2A/"}],"tags":[{"name":"Hibernate","slug":"Hibernate","permalink":"https://bobit.github.io/tags/Hibernate/"}]},{"title":"使用Gitblog和Markdown写博客","slug":"Setting/Gitblog","date":"2017-01-15T05:10:16.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/89d9ac18.html","link":"","permalink":"https://bobit.github.io/posts/89d9ac18.html","excerpt":"","text":"一、Introduction： 12345Gitblog是一个简单易用的Markdown博客系统，它不需要数据库，没有管理后台功能，更新博客只需要添加你写好的Markdown文件即可。它摆脱了在线编辑器排版困难，无法实时预览的缺点，一切都交给Markdown来完成，一篇博客就是一个Markdown文件。同时也支持评论，代码高亮，数学公式，页面PV统计等常用功能。Gitblog提供了不同的主题样式，你可以根据自己的喜好配置，如果你想自己制作博客主题，也是非常容易的。Gitblog还支持整站静态导出，你完全可以导出整站静态网页部署到Github Pages。 二、Environment： 123Gitblog 2.2MarkdownPad 2.5.0.27920PHP 5.2.4+ 三、Configuration： 安装 下载Gitblog源代码 解压上传到你的PHP网站根目录 打开浏览器，访问网站首页 上传Markdown文件到 blog 文件夹 目录说明 12345678app: CodeIgniter主程序目录，cache和logs分别是缓存和日志目录，请确保写的权限sys： CodeIgniter系统源码目录，一般不需要改这里面的任何东西theme： GitBlog主题目录，所有主题模板都放在这里posts: GitBlog存放markdown博客文件的目录，你写的博客都放这里img： 图片目录，你的markdown中引用的图片都放到这里，使用相对路径引用conf.yaml: GitBlog配置文件index.php: 入口php文件注意：2.2版本开始统一将markdown文件和图片文件放到blog目录中。 配置文件conf.yaml 你可能需要修改的配置参数： 12345678url: 修改成你的域名，http://yourdomain.com，注意最后没有杠。title： 修改成你的博客标题subtitle： 修改成你的副标题duoshuo： GitBlog采用多说评论框，你需要申请多说账号，并在这里填写你的多说IDbaiduAnalytics： GitBlog采用百度统计，你需要申请百度统计账号，在这里填写你的统计Keyauthor：修改为你个人的信息即可如果你不需要评论和统计功能，删除duoshuo和baiduAnalytics这两荐即可。其他信息，可根据浏览博客页面的效果进行修改调整。 主题配置 1主题配置参数theme，可选值即为app/theme目录下主题文件夹的名称，如simple和quest，可根据自己喜好选择配置。 静态形式访问 GitBlog支持把整个博客网站导出为静态HTML文件，这样导出整个网站后，可以把它上传到网站空间，以静态形式访问，导出的后的网站结构和运行在PHP环境中一样。 你可以使用以下命令静态导出网站： 123php /data/vhosts/jockchou.gitblog.cn/index.php Gitblog exportSite或php E:\\demo\\gitblog\\index.php Gitblog exportSite 以上命令请换成你的网站路径。成功导出后，会在GitBlog目录下生成一个_site的文件夹，所有导出的静态资源都在这里，你可以随意复制它布署到你的环境中。 导出前可清除cache目录中的缓存，以便导出最新的资源。 写博客 一篇GitBlog就是一个markdown文件，GitBlog使用解析markdown文件为html展示在网页上。 所有的博客markdown文件必须放在blog文件夹里。后缀名只可以是xx.md或者xx.markdown。 注意: 2.2版本开始，所有markdown文件和图片统一放到blog文件夹中。查看gitblog目录结构说明。 发表一篇新博客 在posts里新建文件helloworld.md，输入以下内容： 12345678910111213&lt;!--author: jockchoudate: 2012-03-30title: Hello World!tags: GitBlogcategory: GitBlogstatus: publishsummary: 你好！GitBlog--&gt;你好！GitBlogGitBlog是一个简单易用的Markdown博客系统，它不需要数据库，没有管理后台功能，更新博客只需要添加你写好的Markdown文件即可。 文件里头部的注释用来定义博客的属性，这是一个规定的写法，必须放在文件的头部，每个属性独占一行。再次访问首页，就能看到这篇新发的博客了。如果没显示，请清除app/cache文件夹下的所有缓存文件试试看。 123&lt;!--这里定义博客属性--&gt; 注意：markdown文件须采用utf8编码，如果出现乱码，请修改编码为utf8。 博客属性定义 GitBlog目前针对博客定义了以下属性： 1234567author: 博客作者名称date: 博客时间，用于页面显示，通常来说你不需要填写这个字段，默认就是创建日期title: 博客标题tags: 博客里的标签，多个用逗号或空格分隔category: 博客分类，多个用逗号或空格分隔status: 博客状态，draft表示草稿，GitBlog解析时会忽略草稿；publish表示发表状态，默认为publishsummary: 博客摘要信息 以上所有信息都是独占一行，暂不支持写在多行。 2.1版本的新特性 Gitblog的2.1版本针对博客的属性定义进行了一些优化。新增了两个可选属性 images:博客的图片集，这里可以定义博客用到的图片的地址 head: 作者的头像地址 以上两个属性是可选的，主要是针对一些主题展示用的。 自动提取title，summary，images属性。Gitblog2.1一个重要的功能，如果用户没有定义头部属性，Gitblog会自动解析博客内容，从中提取属性。提取第一个H1作为title，提取所有图片作为images，自动识别摘要信息summary。也就是说你可以不手动定义这三个字段，Gitblog会自动根据上述规则识别，不过还是推荐手动填写。 markdown路径与URL对应关系 GitBlog中posts中的markdown文件可以放在子文件夹中。举个例子，假如你的helloword.md文件目录如下： 1posts/hello/helloword.md 你在浏览器访问的对应地址应该是这样的： 1http://jockchou.gitblog.cn/blog/hello/helloworld.html GitBlog对posts中子文件夹的层级没有限制，但请尽量不要太深，一般2，3层就够了。如果你在本地编写博客，使用FTP工具上传markdown文件到posts目录，如果你熟悉使用Git，SVN类似工具，用它们来发表博客也是极好的。markdown文件的路径和文件名标识了博客的唯一性，改变路径或修改文件名将会导致博客的评论信息丢失。 GitBlog评论，订阅，统计等功能 GitBlog支持评论，订阅，百度统计相关功能，这些功能可由conf.yaml配置开启或关闭，评论采用多说评论框，统计采用百度统计。 多说评论框 GitBlog目前只支持多说评论框，如果你希望你的博客有评论功能，你需要申请多说账号来管理你的评论。多说的官方地址是：http://duoshuo.com。 在多说的管理后台，工具一栏中获取代码你会看到这样一段代码： 12345678910111213141516&lt;!-- 多说评论框 start --&gt;&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;请将此处替换成文章在你的站点中的ID&quot; data-title=&quot;请替换成文章的标题&quot; data-url=&quot;请替换成文章的网址&quot;&gt;&lt;/div&gt;&lt;!-- 多说评论框 end --&gt;&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;&lt;script type=&quot;text/javascript&quot;&gt;var duoshuoQuery = &#123;short_name:&quot;jockchou&quot;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt;&lt;!-- 多说公共JS代码 end --&gt; GitBlog中已经引入了多说代码，你要做的事情只是在conf.yaml配置文中填上你的多说short_name即可。例如我的博客： 1duoshuo: jockchou //填写你的多说账号 多说后台提供了评论的管理功能，你可以在后台配置你的评论样式，功能，以及审核，删除评论等操作。如果你不需要评论功能，删除conf.yaml中的配置项即可。 百度统计 同时，对于博客的PV统计，你需要申请百度统计账号。你也不需要手动获取统计代码。只需要填写你的统计代码中的Key值就行了。例如我的百度统计代码如下： 123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;//hm.baidu.com/hm.js?732acc76ff6bd41343951a67cbfafe34&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; 只需要将732acc76ff6bd41343951a67cbfafe34配置到conf.yaml中即可。 1baiduAnalytics : 732acc76ff6bd41343951a67cbfafe34 #百度统计 代码高亮 GitBlog的代码高亮功能采用highlight.js。它能自动识别代码中的语言类型。默认是开启代码高亮功能的。关闭此功能配置如下： 1highlight: off 数学公式 GitBlog支持LaTeX数据公式，采用的是MathJax.js。此功能默认是关闭的，开启的配置如下： 1mathjax: on RSS订阅 GitBlog支持RSS订阅，订阅的xml文件地址是： 1http://neehow.cn/feed.xml 请替换为你自己的域名，即网站根目录下的feed.xml文件。 四、Shortcuts ： 五、FAQ： Q. A. 参考： GitBlog文档: http://gitblogdoc.sinaapp.com/ 附录： 配置文件conf.yaml 12345678910111213141516171819202122232425262728293031#GitBlog配置文件，使用4个空格代替Tab---url : &quot;http://jockchou.gitblog.cn&quot; #网站首页urltitle : jockchou的博客 #博客标题subtitle : 自豪地采用GitBlog #博客副标题theme : default #主题名称highlight : on #是否开启代码高亮支持mathjax : on #是否开启数学公式支持duoshuo : jockchou #多说评论框IDbaiduAnalytics : 732acc76ff6bd41343951a67cbfafe34 #百度统计IDkeywords : jockchou,markdown,blog,php,github #网站关键字description : GitBlog是一个简单易用的Markdown博客系统,这是我的第一个GitBlog博客. #网站描述version : 1.0 #系统版本号blog: recentSize : 5 #最近博客显示条数 pageSize : 10 #每页显示博客条数 pageBarSize : 5 #翻页Bar的长度 allBlogsForPage : false #页面需要所有博客数据author: name : jockchou #你的名称 email : 164068300@qq.com #你的邮箱 github : jockchou #你的Github名称 weibo : 2558456121 #你的微博IDtext: title: 简介 #任一文本标题 intro: &gt; #任一文本内容,这里可以多行 GitBlog是一个简单易用的Markdown博客系统， 这是我的第一个GitBlog博客","categories":[],"tags":[]},{"title":"Markdown工具对比","slug":"Setting/Markdown1","date":"2017-01-15T05:10:16.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/7af92bce.html","link":"","permalink":"https://bobit.github.io/posts/7af92bce.html","excerpt":"","text":"对比 对比项 cutemarked smark GitBook-Editor haroopad 导出功能 HTML/PDF HTML/PDF/DOCX/WIKI 不支持导出、支持同步到gitbook 快捷键 12345** ctrl+T 插入表格**** ctrl+B 加粗** * ctrl+I 斜体 *###### alt+left/right 标题等级 &gt; ctrl+shift+Q 引用","categories":[],"tags":[]},{"title":"健康美味饺子","slug":"Life/健康美味饺子","date":"2016-12-15T00:38:12.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/2dda6b6e.html","link":"","permalink":"https://bobit.github.io/posts/2dda6b6e.html","excerpt":"","text":"胡萝卜猪肉鸡蛋饺 富含维生素A，补肝明目，清热解毒。 韭菜蘑菇猪肉饺 温中开胃，行气活血，补肾助阳，散瘀。 韭黄三鲜饺 鲜贝、海米和瘦肉中含有丰富的锌元素，促进生长发育，提高抵抗力。 全麦香芹虾肉饺 内含丰富的B族维生素和膳食纤维，有助于控制血糖，适合糖尿病病人食用。 山药豆香鲜肉饺 内含山药，有健脾养胃的功效 香菇鸡肉黄金饺 热量较低，膳食纤维高，可降低血脂。","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"},{"name":"eat","slug":"eat","permalink":"https://bobit.github.io/tags/eat/"}]},{"title":"宝宝晚上睡不安的原因","slug":"Life/宝宝晚上睡不安的原因","date":"2016-12-14T23:38:15.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/23c9dee4.html","link":"","permalink":"https://bobit.github.io/posts/23c9dee4.html","excerpt":"","text":"宝宝晚上睡不安的原因很多，应该可以分为两大类： 一、外在因素 1、饥饿 多见于新生儿和三个月之内的宝宝。这时需要哺乳或喂奶来解决。稍大的宝宝如果睡前吃饱，可以排除这个因素。 天气干燥的情况下，宝宝夜间可能会口渴，给他补充点水分可以让他安静。 2、缺钙 缺钙是导致小宝宝睡觉不安稳首要因素之一，大多数MM都会考虑到它。缺钙、血钙降低，引起大脑植物性神经兴奋性增高，导致宝宝夜醒、夜惊、夜间烦躁不安，睡不安稳。解决方案就是给宝宝补钙和维生素D并多晒太阳。 A、补钙：每日元素钙300-500mg B、补VD：每日400-800IU 3、太热 现在的宝宝穿盖多半是偏热的。其实小宝宝凉一点没有关系，太热会使他不舒服，也容易生病。如果室温挺高，又穿着睡袋，再盖上小被子，宝宝自身散热能力差，会感到热而醒来。这时只要减少穿盖即可解决。 4、腹胀 1岁以内的婴儿都会出现这种情况。如果睡前吃得过饱，或喝奶后没有打嗝排气，小宝宝都会因腹胀而醒来。大点的婴儿多半是睡前几小时内吃了一些难以消化的东西。注意按摩、排气和调整饮食即可解决。积食的宝宝可用点小中药治疗。 5、尿湿 因尿裤太湿或勒得太紧，也会使宝宝不舒服。有的宝宝想尿尿时不愿轻易尿在尿裤上，也会翻来覆去不安稳。细心的MM观察一下. 6、白天太兴奋或环境的变化 稍大点的宝宝的睡眠不安也可与白天过度兴奋或紧张、日常生活的变化有关。如出门、睡眠规律改变、搬新屋、有新的保姆和陌生人来。比如老的保姆走了会引起婴儿晚上睡眠不安。经常更换抚养人也使孩子睡眠障碍的发生率明显升高。白天睡的太多也可影响晚上的睡眠。 7、出牙或身体不适 宝宝出牙期间往往会有睡不安稳的现象。有时几夜反复折腾之后妈妈才发现，宝宝的牙床冒出了白白的小牙。可见出牙还是有些疼痛的。其他疾病当然也会引起睡眠不安。生病或发烧前的夜晚往往是翻覆不宁的。这些都需要细心的观察和判断。 二、内在因素 小儿的内在因素对睡眠也有影响：大脑神经发育尚未成熟。孩子生理上尚未建立固定的作息时间表。宝宝生物时钟日夜规律的调整，要倚赖宝宝生理成熟度的配合。 调查表明，神经系统兴奋性较高的宝宝，生理成熟度往往晚些，容易出现睡眠不安的情况。这种宝宝相对睡眠好的宝宝，性格可能更趋向活跃、外向、敏感。 人的睡眠分为深度睡眠和浅度睡眠，夜间约3-4小时交替一次。婴儿和幼儿同样，可能深睡和浅睡的交替时间更短一些，约2-3小时交换一次。大人和许多睡整夜觉的宝宝，在浅度睡眠到来时，可以较好地自我调整，重新进入深度睡眠。而也有许多小宝宝甚至许多大人，无法自我调整入睡，所以就从浅度睡眠中醒来。 许多正在吃母乳的宝宝，无法自我调整，心理渴望爱抚，妈妈的乳房无疑是她最大的安慰。当然，有时抱睡、边走边摇等也会有效。尤其随着神经系统的发育和大脑皮层活跃，宝宝越长大越容易无法自我调整。这就是宝宝在四、五个月之后反而睡觉比小时候还要差、醒的次数还要多的原因。 排除掉渴饿冷热缺钙腹胀出牙兴奋等等外在因素之后，你的睡不好觉的宝宝，也许只是因为大脑皮层活跃，无法自我调整进入深睡状态。何必奢望自己的宝宝是能够自行完成调整的那一个？在断奶之后，或随着宝宝的成长，这些现象总归会解决的。 最后要提醒妈妈的是：哭闹或烦躁不安时可采取轻拍或抚摸孩子，或给他喂奶和喝水，可使宝宝重新入睡。不要马上又抱又哄，这样会恶性循环。某些神经类型的正常小儿晚上睡眠很差，但只要吃、发育增长没问题就不必太担心。","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"}]},{"title":"0-12个月宝宝每月注意事项","slug":"Life/0-12个月宝宝每月注意事项","date":"2016-12-14T23:38:11.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/3892ebd9.html","link":"","permalink":"https://bobit.github.io/posts/3892ebd9.html","excerpt":"","text":"一个月 1、24小时内要接种乙肝疫苗、卡介苗 2、每天可以睡16—20小时 3、不要枕枕头，把毛巾折两折枕，三个月后给宝宝枕枕头，枕高3到4厘米. 4、母乳喂奶前后半小时不要喂水，稀释胃液影响消化，睡前不喂水。纯母乳喂养6个月内可以不喂水。人工喂养，两餐之间需要喂水。 5、早看黑白图片，培养智力，距离眼镜20厘米处，每周换一张照片，直至宝宝有反应。（0—3个月内） 6、新生儿期间，按需喂养。 两个月 1、每个乳房喂奶10—15分钟，每三小时喂一次，养成按顿喂养好习惯。 2、不要用摇晃的方式哄宝宝睡觉，影响脑发育，造成轻微智力低下。若要哄，可幅度小、有规律、轻柔舒缓、10分钟左右。 3、45天可以训练宝宝抬头，每天两次，每次10秒钟，每次俯卧时间不宜超过一分钟 4、不要经常抱宝宝，不利于独立性格形成。 三个月 1、上午可以睡12次，下午2次，晚上睡12个大觉。 2、喂奶每天6次，每次100ml~120ml，分6：00、9：30、13：00、14：30、8：00、11：00.。每日喂养总量超过600ml即可。为四月添加辅食培养好习惯。 3、陪宝宝发a、e等元音，训练宝宝追视能力。 4、给宝宝做按摩，每天洗澡后做抚触按摩，有效促进神经系统发育和锻炼宝宝的感觉系统（益智）。 5、预防宝宝经常偏头睡。 四个月 1、给宝宝枕枕头，枕高3~4厘米。 2、宝宝游泳可以提高智力。可以增强自信心、增强免疫力、增大肺活量，睡前游泳更可以促进宝宝身高和体重的增加。 3、不要看电视超过3分钟，辐射，对眼睛不好。 4、训练宝宝视觉，准备纯色的彩色图片，教宝宝认识不同颜色。 5、用棉签给宝宝擦牙。 6、宝宝若哭，非让抱着才睡，可让宝宝哭个够，一般一周哭的现象就会消失。 7、可以喝果汁，每天10ml，用果汁和果肉分离的榨汁机。按1：3（水）的比例将果汁稀释，用60度的温开水稀释，冷却到40度喂宝宝，上午两餐之间喂一次，适应后加至20ml，一周一种水果。 8、训练宝宝用手抓东西、训练宝宝嗅觉。 9、听三字儿歌学发音。 五个月 1、可加辅食鸡蛋黄（不要鸡蛋清，容易致敏），以蛋黄恰好凝固为宜，用小勺取1/4碾碎，加少量温开水调成糊状，或加入果汁。于喂奶后喂辅食，每次1/4，一周后无过敏，加至1/2蛋黄，再一周加至1个蛋黄。 2、适应蛋黄后，可喂养苹果泥、香蕉泥、米汤等，每次一勺。47个月喂养半流质食物，712个月添加碎菜末、等碎状固体食物。 3、此月宝宝出牙，会吃手，应阻止，否则会影响出牙或牙齿排列不整齐，有缝隙。可用磨牙棒，或转移宝宝注意力。 4、不要添加淀粉类食物 5、训练宝宝发ma、ba等。 六个月 1、不要喝豆浆、不要用牛奶、酸奶代替配方奶。 2、宝宝开始有脾气，不要纵容，要让宝宝自己安静下来后，再引导。 七个月 1、保护宝宝牙齿，吃完奶后，喂几口温开水冲洗口腔，棉签粘淡盐水每天早晚帮宝宝清洗牙齿和牙床。 2、给宝宝讲故事和看彩色图片书，重复讲一个故事，看宝宝反映。 3、宝宝会出现假哭、假笑等来达到自己的目的，妈妈应视情况让宝宝觉得这样做不能达到目的，几次之后，宝宝就不会再这样了。如不然，宝宝就会想办法编造更复杂的谎言。 4、宝宝扔东西，不是惹你生气，开始时是因为发育不全拿不稳，妈妈不应生气，应和宝宝玩扔东西的游戏，适当加以引导。 5、宝宝怕生人，出现依恋，可给予更多陪伴和引导。 八个月 1、不要给宝宝喝糖水、冰水 2、训练宝宝用小勺 3、宝宝会出现很多重复的动作，如反复摆同一积木，不要阻止。 4、不要告诉宝宝“天黑，外面有鬼之类的话”宝宝以后会怕黑，胆子小，不敢独处。 九个月 1、可以吃面食、小馒头等 2、6个月前纯母乳喂养的宝宝可以不喝水、6个月后的宝宝不要喝纯净水和矿泉水，喝煮好的温开水。 3、不要给宝宝吃膨化食品、爆米花、松花蛋、油条、腌制食品、味精多的食品，会影响宝宝智力。 4、经常锻炼宝宝的爬行能力，不要急于让宝宝行走。爬好了，才能走。 十个月 1、不要吃糖和巧克力 2、制定宝宝吃饭规则、定时定量定位置，养成良好习惯，否则宝宝容易不爱吃饭，影响发育。坚决不吃零食，吃零食会影响吃正餐。 3、和宝宝一起看书、翻书。 4、给宝宝准备玩具箱，让宝宝玩完玩具自己放回去。可以告诉他，小球回家了。 5、培养宝宝乐感，每天10~15分钟古典音乐，宝宝爬行时可以放有节奏的音乐。 6、做游戏激发宝宝好奇心，可以将搭好的积木推到，再陪宝宝搭、可以让宝宝找小球。 十一个月 1、学习站立，摔倒了，鼓励宝宝站起来继续走。 2、给宝宝营造独立思考的环境，宝宝玩玩具或积木时不要打扰，若买了新玩具看见宝宝还在玩别的玩具，也不要打断宝宝，等宝宝不玩后，再告诉宝宝玩新玩具，不然宝宝会对什么事情都不专心，会习惯浅尝辄止。 3、看图片学动物叫 4、不要使用学步车 5、宝宝任性不能纵容，可转移宝宝注意力，或等宝宝安静下来再处理。 十二个月 1、让宝宝多翻书，可以锻炼手指灵活，陪宝宝看书识字，每天坚持看，养成宝宝主动看书的习惯。 2、训练宝宝自己走，宝宝摔倒了，一定不要扶，忍痛引导宝宝自己起来，开始时宝宝会很慢，慢慢会自己起，这样的宝宝坚强、独立。 3、给宝宝说话的机会，如宝宝如果想拿杯子，不要马上递给他，要鼓励宝宝说出来。要经常训练宝宝说话的机会，1224个月是宝宝口语的表达阶段，应训练宝宝主动表达自己的需求。学习口语最佳时间是24岁，所以不用等上学再学习英语。 4、光脚丫走路好处多","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"}]},{"title":"坐月子可以吃什么水果","slug":"Life/坐月子可以吃什么水果","date":"2015-12-15T02:38:14.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/8d1d0ebf.html","link":"","permalink":"https://bobit.github.io/posts/8d1d0ebf.html","excerpt":"","text":"1.奇异果 又称弥猴桃，味甘性冷，维生素C含量极高，有解热、止渴、利尿、通乳的功效，常食可强化免疫系统。对于剖腹产术后恢复有利。因其性冷，食用前用热水烫温。每日一个为宜。 常食可强化免疫系统。对于剖腹产术后恢复有利 2.榴连 味甘性热，盛产于东南亚，有水果之王的美誉。因其性热，能壮阳助火，对促进体温、加强血液循环有良好的作用。产后虚寒，不妨以此为补品。 榴连性热，不易消化，多吃易上火。与山竹伴食，即可平定其热性。同时，剖腹产后易有小肠粘黏的产妇谨食。 3.苹果 苹果味甘凉，性温，主要为碳水化物。含有丰富的苹果酸、鞣酸、维生素、果胶及矿物质，可预防和治疗坏血病、癞皮病，使皮肤润滑、光泽。其粘胶和细纤维能吸附并消除细菌和毒素，能涩肠、健胃、生津、开胃和解暑，尤其对治疗产妇腹泻效果更佳。苹果还能降低血糖及胆固醇，有利于患妊娠高血压综合症、糖尿病及肝功能不良产妇的产后恢复。此外苹果中含大量钾盐，能与体内过剩的钠盐结合并排出体外，故低钾及摄盐过多者食用苹果是有益的。 4.木瓜 ​ 木瓜的功效很多，降压、解毒、消肿驱虫，帮助乳汁分泌 味甘性平。木瓜的功效很多，降压、解毒、消肿驱虫，帮助乳汁分泌，让胸部更丰满、消脂减肥等。 木瓜的营养成分主要有糖类、膳食纤维、蛋白质、维生素B、C、钙、钾、铁等，产于我国南方。 我国自古就有用木瓜来催乳的传统。木瓜中含有一种木瓜素，有高度分解蛋白质的能力，鱼肉、蛋品等食物在极短时间内便可被它分解成人体很容易吸收的养分，直接刺激母体乳腺的分泌。 同时，木瓜自身的营养成分较高，故又称木瓜为乳瓜。产妇产后乳汁稀少或乳汁不下，均可用木瓜与鱼同炖后食用。 5.橄榄 ​ 孕妇及哺乳期妇女常食橄榄，可使宝宝更聪明 味甘，略酸涩，性平。有清热解毒、生津止渴之效。孕妇及哺乳期妇女常食橄榄，可使宝宝更聪明。 6.葡萄 味甘酸，性平。有补气血、强筋骨、利小便的功效。因其含铁量较高，所以可补血。制成葡萄干干后，铁占比例更大，可当作补铁食品，常食可消除困倦乏力、形体消瘦等症状，是健体延年的佳品品。妇女产后失血过多，可以葡萄作为补血圣品。 7.菠萝 味甘酸，性平。产于广东、广西一带。有生津止渴、助消化、止泻、利尿的功效。富含维生素B1，可以消除疲劳、增进食欲，有益于产妇产后恢复。 8.香蕉 味甘、性寒。有清热、润肠的功效。产后食用香蕉，可使人心情舒畅安静，有催眠作用，甚至 使疼痛感下降。香蕉中含有大量的纤维素和铁质，有通便补血的作用。可有效防止因产妇卧床休息时间过长，胃肠蠕动较差而造成的便秘。 ​ 因其性寒，每日不可多食，食用前先用热水浸烫。 9.龙眼 又称桂圆，味甘性温，产于两广等地。龙眼益心脾、补气血、安精神，是名贵的补品。产后体质虚弱的人，适当吃些新鲜的桂圆或干燥的龙眼肉，既能补脾胃之气，又能补心血不足。 将龙眼肉与蛋花同煮后喝汤，对于产后调养效果极好。 ​ 山楂有散瘀活血作用，能排出子宫内的瘀血，减轻腹痛 10.山楂 味甘酸，性温。山楂含大量碳水化物、维生素及钙、磷、铁等，其中钙含量为诸果之冠。还含有山楂酸、柠檬酸、苹果酸、果糖及黄酮类，有散瘀消积、化痰解毒、提神清脑、止血清胃和增进食欲的作用，能降低血压及血胆固醇的含量。产妇生孩子后过度劳累，往往食欲不振、口干舌燥、饭量减少，如果适当吃些山楂，能够增进食欲、帮助消化。 另外，山楂有散瘀活血作用，能排出子宫内的瘀血，减轻腹痛。","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"}]},{"title":"判断车距","slug":"Life/判断车距","date":"2015-12-15T01:38:13.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/b8467e52.html","link":"","permalink":"https://bobit.github.io/posts/b8467e52.html","excerpt":"","text":"判断车距： 1、车影占后视镜的全部，车距为3米。 2、车影占后视镜的2/3，车距为5米。 3、车影占后视镜的1/2，车距为9米。 4、车影占后视镜的1/3，车距为12米。 5、前挡风玻璃下沿，看到前车后保险杠的上沿，车距为1米。 6、前挡风玻璃下沿，看到前车后保险杠的下沿，车距为2米。 7、前挡风玻璃下沿，看到前车后轮胎的下沿，车距为3米。 8、前方停止线和左前门角5CM处对正，刚好不越线。 9、前挡风玻璃下沿，看到前方行人小腿中部，正面距人约2.5米。 10、前挡风玻璃下沿，看到前方行人膝盖上，正面距人约1米。 11、前挡风玻璃左下角，看到行人臂部，侧面距人约0.3米。 12、前挡风玻璃右下角，看到行人臂部，侧面距人约0.5米。 13、前挡风玻璃左下角，看到行人膝盖下，侧面距人约0.7米。 注意事项： 1、倒车时，左侧中窗下沿看到他车车轮中心时，左侧面距左车约0.8米。 2、倒车时，右侧中窗竖后中间，看到他车车轮中心时，右侧面距左车约1米。 3、倒车时，后视镜看到后轮胎上保险杠后端与停车线对齐时，本车后部距离停车线约0.2米。 可以车不启动，直接挂倒档显示倒车影像图像，然后倒车后看大概距离就好，关键是倒车影像要带有倒车标尺线的比较好看大概距离。","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"},{"name":"car","slug":"car","permalink":"https://bobit.github.io/tags/car/"}]},{"title":"驾车好习惯，终身受用","slug":"Life/驾车好习惯终身受用","date":"2015-12-14T23:38:19.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/f2686f9c.html","link":"","permalink":"https://bobit.github.io/posts/f2686f9c.html","excerpt":"","text":"加油的时候别加满了，40升的油箱加个35就行了，估计跑的公里数差不多，在航空领域这个现象叫“油耗油”，别白浪费钱，还污染环境。 正常行驶时，前车突然并线给你让路，绝对没好事，咱们现在的司机还没这个觉悟，千万别给油超车，最好马上松油预备刹车，同时迅速观察两侧后视镜，判断出如果要并线往哪边并，八成前面有情况。 堵车或等灯的时候别跟的太近，除非有人想加塞，至少要留出可以一把掰出去的距离，以防前车故障，自己也被加在中间。这是一个老司机告诉我的，当年他就这样陪着前车呆了半个小时。 排队时，为了防止别人加塞，在加塞来车一侧，多留半个车身。比如你在左转道排队，经常有人从直行道过来加塞，你尽量用右轮压着左转道的右边线开，给自己向左迂回留出余地，再跟紧前车，加塞的很难得逞。 当你从后视镜里看别的车有点费劲的时候，也就是你该开灯的时候了，不是为了看清道路，而是为了让别人看见你，尤其是白天下雨的时候！如果你愿意，时速超过100的时候也应该开灯，反正我是这么做的。 停车的时候，尽量将你的车头朝外，一个是走的时候方便，另外一个重要的功能就是防盗，虽然这不是灵丹妙药，但是如果我是贼，只有偷一辆车的机会时，我偷车头朝里的。 开车并线的原则是，不要让后车踩刹车，这也是你作为行人过马路的原则，如果你让他为了避让你而踩刹车的话，他就有可能踩到油门上！ 过路口的时候一定一定要减速，不管他是不是绿灯，至少不能再加油了，尤其是没有交通灯的路口，在咱们国家，很多人是不珍惜生命的，别跟他们较劲。 即便你是新手，也不要在高速公路上开的很慢，在路况较好的非高速公路也一样，经常看到很多大车为了超过一辆只有40公里/小时的轿车时而强行并线，险象环生！大货车从起步到开起来非常的吃力，所以货车司机很不爱踩刹车，他宁愿并线超车也不原减速到3档再花10分钟加到5档。 以我看来开车最危险的敌人不是开快车，而是分神！开快车的时候往往聚精会神，如果没有突发事件，一般不会出事，我不是在鼓吹开快车，10次事故9次快，一旦出事就有生命危险的，最好是中速行驶！我几次吓出汗来的时候，都是在我走神的时候发生的，记得一次手机想了，我低头想看一下谁的电话，等看清楚了打开接听时，一抬头，前车火红的刹车灯是如此的刺眼，最近的一次了，千万别走神。 在人车混行的道路上，尽量离路边的自行车和行人远点，向路的中间靠，如果你没把握，不要紧别害怕，因为对面的来车会躲你，而行人和自行车是背对你的，不但不能躲你，说不定还会向你晃动，得给他们留出余地！ 晚上行车的时候，不要用远光晃前方的行人和自行车，他们不懂的，不会给你让路的，你这么做只能使对面的车辆花了眼，不如直接的鸣笛。我经常能看到很多司机徒劳的用灯晃着行人，结果就是招来对面车辆刺眼的远光。 下雨之后，走在你不熟悉的路段时，见到积水的坑，一定要减速，因为你不知道它有多深，最好是尾随一辆车，有一次我就是在路边停了一下，让后面的一辆超了过去给趟路的，并不耽误时间。 如果在高速公路上遇到水洼，尽量躲开，千万别想看到水花四溅的壮观。如果躲不开，就尽量2个前轮一起压水，尽管高速上的水洼一般不会很深，但如果一边的轮子压上，会瞬时失去抓地力，如果速度很快，就会横甩出去，甚至翻车。 如果你的车上坐了3个人以上，就别开的太快了，一是咱们的车排量小，人多了车就没劲了，提速会打很大的折扣，最重要的是咱们的刹车会变的比较迟钝，距离会明显的加长，刹车的时机和力度都要比平时来的早和狠。 大家经常遇到赶灯的时候，如果你前面还有一辆车，那就算了，谁知道他会不会发什么神经停在线上，这样的事太多了，别跟的太近了，如果你是第一辆，那就别犹豫，冲过去，别加了半天的速，最后心虚了，一脚停在那里，后面来个追尾，虽然不是你责任，可是多别扭啊！ 停车超过3个小时后，再起步，一定要热车，无论春夏秋冬，这里的热车不是指水温，而是热你的润滑系统，至于水温，可以边开边热。 停车后，车里别放什么东西，别以为不放钱包，电脑包就行了，就是半条烟，也可能搭上你的挡风玻璃！ 有几个不能超车的原则要注意，拐弯的时候不能超，前方有路口的时候不能超，红灯变绿灯起步时，在没有完全通过路口时不要超，如果你想快点，就稍微往前探点，把路口的所有情况都看到，这时可以超。 遇到大公共靠边进站，千万别高兴，以为它给你让了路，一定要减速，经常会有人从公共的前头跑出来，你可以通过观察大公共的车底有没有行人的腿脚或影子来判断。","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"},{"name":"car","slug":"car","permalink":"https://bobit.github.io/tags/car/"}]},{"title":"科学合理“坐月子”的10条建议","slug":"Life/科学合理“坐月子”的10条建议","date":"2015-12-14T23:38:18.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/d3d0aa5.html","link":"","permalink":"https://bobit.github.io/posts/d3d0aa5.html","excerpt":"","text":"适宜的室内环境 产妇和宝宝的居室要安静、整洁、光线充足、温度与湿度适中，有较好的通风。夏日温度高时，要注意降温防中暑，冬天气候寒冷时，要注意保暖防凉。 保持安静 产妇与宝宝休息时，卧室要保持安静，避免噪音，以免突然的响声，引起婴儿不自主的反射动作。 保持空气流通 产妇“坐月子”期间最忌讳空气不流通。比如门窗紧闭、裹头扎腿，导致室内空气混浊，容易让产妇及婴儿患病。冬天可以每天定时开窗通风，每次半小时左右，避免过堂风、直流风，或者开窗通风时，产妇和婴儿可以到另一个房间。 坐月子不等于卧床一月 产后第一天孕妇应保证充足的睡眠和休息，剖宫产的产妇在24小时候就可以起床做轻微的活动，这有利于加速血液循环，促进肠道蠕动，使大小便通畅。 衣着干净舒适 产后产妇新陈代谢旺盛，汗多恶露多，乳汁常溢出沾染衣物，容易引起细菌繁殖，引发多种感染，因此产妇的衣物要勤洗勤换，太阳下晾晒杀菌，以防疾病。 正常刷牙 月子里也要健康刷牙、漱口。产后牙龈娇嫩，建议用软毛质地的牙刷，避免冷水刺激，应用温水刷牙、漱口。动作要轻柔，避免损伤牙龈。 正常洗头 月子里适当的洗头和梳头对身体有好处。洗头水温适宜，在37℃左右，洗完后及时擦干或用吹风机吹干，避免被凉气吹。头发未干之前，不能立刻入睡，会导致湿邪入侵袭导致头疼、颈部不适。 正常洗澡 产后24小时后可以擦拭身体局部。产后1周可以淋浴。避免坐浴。控制好合理的水温，调整好浴室内的温度，把握好洗澡时间，可不太长，10分钟左右为宜。注意未愈合的会阴及腹部伤口处不要沾水。 饮食适度 饮食可以少量多餐，食物干稀搭配，荤素搭配，清淡为宜。 保持愉悦心情 产后身体内分泌激素变化较大，容易影响产妇情绪，应注意保持开朗情绪，避免烦心事。","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"}]},{"title":"汽车暴晒后如何降温","slug":"Life/汽车暴晒后如何降温","date":"2015-12-14T23:38:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/8bc2c726.html","link":"","permalink":"https://bobit.github.io/posts/8bc2c726.html","excerpt":"","text":"汽车暴晒后如何降温 1．在高温天，车主停完车后可以将车窗留出1厘米左右的缝隙，这样有助于内外气流流通，不让车内温度过高。 2．汽车在高温下暴晒一段时间后，车内温度会超过室外气温，此时开车的话，可以先开窗透气，然后再开空调，将空调调至吹脚状态，这样利用冷气比热气重的原理将热气排出，有利于迅速降温。 车内凉快下来后，为了保持制冷效果，可切换至内循环，但不能长时间开内循环，因为长时间使用车内空气会使车内含氧量下降，容易造成司机疲惫，严重的甚至可能导致中毒。 注意事项: 千万别在车内睡觉 别把打火机放在车内 当心香水成隐形炸弹 高温天让轮胎多“歇歇”","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"}]},{"title":"汽车上高速前检查事项","slug":"Life/汽车上高速前检查事项","date":"2015-12-14T23:38:16.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/ba488b1b.html","link":"","permalink":"https://bobit.github.io/posts/ba488b1b.html","excerpt":"","text":"轮胎 这是当属第一位要检查的部位，汽车的轮胎就像人的双腿，腿坏了，他还能走路么？ 仔细查看每条轮胎的外观，是否有划伤。如果只是橡胶划伤不影响使用，但是如果伤到里面的轮胎线，就必须更换新胎。如果超过两年轮胎没有动过，最好把前轮的两条轮胎和后轮的轮胎进行交换。仔细检查4个轮胎的一致性，开在平坦的路上，不扶方向盘，看能否走直线，否则赶紧去做下四轮定位。 1、检查胎纹；一般轮胎胎纹深度小于2mm时，就不能用于跑长途了。 2、测胎压；一般汽车胎压在2.5个压就可以了，不要过高或过低。 3、检查备胎；确认备胎完好，并需要确认备胎胎压是否达标。 机油 把车放在平坦的地方，待车凉后拔掉机油尺，用擦布擦干净再插进去，插到底后拔出来查看，机油位在油尺刻度最小上限/最大上限范围内即可，不可越过刻度区间。 需要考虑你的目的地当地的气候，如果冬天去东北，就要考虑机油的黏度，可以咨询当地维修点是否需要更换 防冻液/玻璃水 防冻液可以防止汽车在寒冷冬季停车时冷却液结冰膨胀，导致散热器和发动机气缸冻裂。防冻液全年都要使用的哦。 和检查机油的方法类似，防冻液的刻度一般在箱体上，确认防冻液液面在刻度的范围内即可。 跑高速玻璃水离不了，特别是遇到雨雪天气，所以出行前最好将玻璃水注满以备用。 灯光 包括行车灯、倒车灯、刹车灯、转向灯、车内灯、雾灯等，特别是雾灯，如果有问题，需要马上更换。一个旅途下来，遇到的天气可能变换几样，恶劣天气下，灯光的作用特别重要，平时使用中如果有灯泡损坏的，最好及时更换维修。 刹车 看看刹车片厚度，如果感觉太薄（小于2mm）就需要更换了。 正常速度行驶，踩刹车试试有没有什么异常。将车停到坡道上，看看手刹是否有作用。 电瓶 很多车友平时都不太注意对电瓶的检查与保养，其实电瓶却是汽车电子控制系统的心脏。 电瓶也有使用年限，如果使用期限大于3年的，目的地气候比较寒冷的，跑长途前一定要注意检查一下，另外最好随车带两根电瓶线，以备不时之需。 有的汽车电瓶上有个观察孔，电瓶灯是白色的则说明需要充电，如果电瓶灯是黑色则表示要更换电瓶了。没有观察孔的，就在熄火状态测量电瓶电压，大于12V就没问题。没有测量工具的可以根据车子启动是否顺畅，大灯灯光是否够亮来判断。 整车 检查玻璃是否有裂痕，车门开关是否异常，仪表盘是否正常工作，空调制冷制热功能，反光镜位置，喇叭，导航，转向，雨刷等等。这些也都是日常需要注意的地方。 工具 车内必备的一些自救工具：千斤顶，6mm~19mm扳手/套筒，一字/十字螺丝刀，破窗工具，牵引带等 车上必备的一些应急装备：三角警示牌、灭火器、警示灯等 行车必备的证件：驾照、行驶证、保险单等","categories":[{"name":"Life","slug":"Life","permalink":"https://bobit.github.io/categories/Life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://bobit.github.io/tags/life/"}]},{"title":"Postman使用方法详解","slug":"Setting/Postman","date":"2015-11-13T03:16:35.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/7bfeb391.html","link":"","permalink":"https://bobit.github.io/posts/7bfeb391.html","excerpt":"","text":"下载 摘要 : Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。 插件大小：5.88MiB插件版本：4.1.3支持语言：English 下载完应该得到的是扩展名为crx的文件。 比如： Postman-REST-Client_v0.8.4.14.crx 安装 打开chrome浏览器，点击右上角“自定义及控制”按钮 -》 （更多）“工具” -》“扩展程序”。 直接把下载好的XXXXX.crx插件拖到chrome的扩展管理界面中，然后中间会出现“拖动以安装”的插件按钮，然后就安装。 如果出现提示说这个插件必须要在应用商店里面装 重命名crx文件，把后缀改成zip或者rar，比如：Postman-REST-Client_v0.8.4.14.zip。 然后解压，解压到的文件夹为： Postman-REST-Client_v0.8.4.14 接着回来刚才的扩展程序管理界面 先勾选右上角的“开发者模式”，这个时候左上角会出现下图所示的东西： 然后，点击左上角的“加载正在开发的扩展程序…”，打开刚才解压好的文件夹，就可以安装了。 如提示“_metadata”有问题之类的话，那就打开刚才解压好的文件夹（Postman-REST-Client_v0.8.4.14） 将里面的“_metadata”文件夹重命名为“metadata”，其实就是把前面的下划线去掉。 再重复操作，应该就可以了。 使用 Postman可以发送几乎所有类型的HTTP请求！。 用户的大部分数据都需要通过HTTP请求来与服务器进行交互。 Postman插件就充当着这种交互方式的“桥梁”，它可以利用Chrome插件的形式把各种模拟用户HTTP请求的数据发送到服务器，以便开发人员能够及时地作出正确的响应。 在Chrome中安装了Postman插件以后，发送HTTP数据的时候只需要编写相关测试数据的时候加入一定量的参数信息即可。 Get请求 在地址栏里输入请求url：http://localhost:9998/api/user 选择“GET”方式， 点击&quot;Url params&quot;,添加url params key:id , value:1 点击“send”得到json数据如下： Post请求 在地址栏里输入请求url：http://localhost:9998/api/user/1 选择“POST”方式， 点击&quot;application/x-www-form-urlencoded&quot;, 添加key:name , value:baidu-lulee007 添加key:sex , value:man 注意 请求支不支持post请求是由服务端决定 如果服务端需要请求类型为json，需要在“headers”添加 key:Content-Type , value:application/json 选择“raw”,并添加： { “id”: 1, “data”: { “name”: “baidu-lulee007”, “sex”: “man” } } form-data: 就是http请求中的multipart/form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。既可以上传键值对，也可以上传文件。当上传的字段是文件时，会有Content-Type来表名文件类型；content-disposition，用来说明字段的一些信息； 由于有boundary隔离，所以multipart/form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。 x-www-form-urlencoded： 就是application/x-www-from-urlencoded,会将表单内的数据转换为键值对，比如,name=java&amp;age = 23 raw 可以上传任意格式的文本，可以上传text、json、xml、html等 binary 相当于Content-Type:application/octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。 multipart/form-data与x-www-form-urlencoded区别 multipart/form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息； x-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Postman","slug":"Postman","permalink":"https://bobit.github.io/tags/Postman/"}]},{"title":"Hexo 输入数学公式","slug":"Setting/Hexo2","date":"2015-11-13T03:14:35.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/79274bb6.html","link":"","permalink":"https://bobit.github.io/posts/79274bb6.html","excerpt":"","text":"Hexo 输入数学公式主要通过MathJax 渲染LaTeX 公式实现的，具体开启步骤以及简要语法介绍如下。 安装配置 在next 主题配置文件_config.yaml 中找到 MathJax 选项，将enable 改成 true 即可： 12345MathJax Supportmathjax: enable: true per_page: false cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML 页面插入 页面插入公式有两种形式，一是行内插入公式不居中显示： 1$公式$ 例如 E=mc2E=mc^2E=mc2 第二种是行间插入公式，居中显示： 1$$公式$$ 例如： S=π∗r2S=\\pi*r^2S=π∗r2 语法公式 关于公式的语法格式，主要有以下常用： 上下标 ^ 表示上标，_ 表示下标。 1234$$a_&#123;1&#125; x^&#123;2&#125; $$$$e^&#123;-\\alpha t&#125; $$$$a^&#123;i&#125;_&#123;ij&#125;$$$$e^&#123;x^2&#125; \\neq &#123;e^x&#125;^2$$ a1a_{1} a1​ x2x^{2} x2 e−αte^{-\\alpha t} e−αt aijia^{i}_{ij} aiji​ ex2≠ex2e{x2} \\neq {ex}2 ex2​=ex2 此外，如果左右两边都有上下标，则使用 \\sideset 命令，效果如下： 1\\sideset&#123;^xy&#125;&#123;^xy&#125;\\bigotimes \\sideset{xy}{xy}\\bigotimes 平方根 平方根输入命令为 \\sqrt，n次方根命令为 \\sqrt[n]，其符号大小由LaTeX 自动给定： 1$$\\sqrt&#123;x&#125;$$ $$\\sqrt&#123;x^2+\\sqrt&#123;y&#125;$$ $$\\sqrt[3]&#123;2&#125;$$ x\\sqrt{x} x​ x2+y\\sqrt{x^2+\\sqrt{y}} x2+y​​ 23\\sqrt[3]{2} 32​ 水平线 使用 \\overline 和 \\underline 分别在表达式上下方画出水平线： 12$$\\overline&#123;m + n&#125;$$$$\\underline&#123;m + n&#125;$$ m+n‾\\overline{m + n} m+n​ m+n‾\\underline{m + n} m+n​ 水平大括号 命令 \\overbrace 和 \\underrace，效果如下： 12$$\\underbrace&#123;a+b+\\cdots+z&#125;$$$$\\overbrace&#123;a+b+\\cdots+z&#125;$$ a+b+⋯+z⏞\\overbrace{a+b+\\cdots+z} a+b+⋯+z​ a+b+⋯+z⏟\\underbrace{a+b+\\cdots+z} a+b+⋯+z​ 矢量 矢量的命令是 \\vec，用于单个字母的向量表示。\\overrightarrow 和\\overleftarrow 分别表示向右和向左的向量箭头： 123$$\\vec&#123;a&#125;$$$$\\overrightarrow&#123;AB&#125;$$$$\\overleftarrow&#123;BA&#125;$$ a⃗\\vec{a} a AB→\\overrightarrow{AB} AB BA←\\overleftarrow{BA} BA 分数 分数使用 \\frac{…}{…} 进行排版： 123$$1\\frac&#123;1&#125;&#123;2&#125;$$$$\\frac&#123;x^2&#125;&#123;k+1&#125;$$$$x^&#123;1/2&#125;$$ 1121\\frac{1}{2} 121​ x2k+1\\frac{x^2}{k+1} k+1x2​ x1/2x^{1/2} x1/2 积分运算符 积分运算符使用 \\int 生成。求和运算符使用 \\sum 生成。乘积运算符使用 \\prod 生成。上下限使用^ 和_ 命令，类似 上下标： 123$$\\sum_&#123;i=1&#125;^&#123;n&#125;$$$$\\int_&#123;0&#125;^&#123;\\frac&#123;\\pi&#125;&#123;2&#125;&#125;$$$$\\prod_\\epsilon$$ ∑i=1n\\sum_{i=1}^{n} i=1∑n​ ∫0π2\\int_{0}^{\\frac{\\pi}{2}} ∫02π​​ ∏ϵ\\prod_\\epsilon ϵ∏​ 希腊字母 α\\alphaα \\alpha β\\betaβ \\beta γ\\gammaγ \\gamma δ\\deltaδ \\delta ϵ\\epsilonϵ \\epsilon 字体转换 要对公式的某一部分字符进行字体转换，可以用{\\rm需转换的部分字符}命令，其中\\rm可以参照下表选择合适的字体。 一般情况下，公式默认为意大利体。 12345\\rm 罗马体 \\rm test \\it 意大利体 \\it test\\bf 黑体 \\bf test \\cal 花体 \\cal test\\sl 倾斜体 \\sl test \\sf 等线体 \\sf test\\mit 数学斜体 \\mit test \\tt 打字机字体 \\tt test\\sc 小体大写字母 \\sc test","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://bobit.github.io/tags/Hexo/"}]},{"title":"静态博客选型之hexo","slug":"Setting/Hexo1","date":"2015-11-13T03:13:35.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/9406e9db.html","link":"","permalink":"https://bobit.github.io/posts/9406e9db.html","excerpt":"","text":"背景 给自己的学习和生活做个记录，在github上创建自己的开源博客，也希望自己能坚持写文_。从最开始的wordpress，到现在的hexo，网站变得越来越简单，越来越轻量级。 选型 hexo 参考 hexo官方文档：https://hexo.io/zh-cn/docs/ hexo介绍 主页： https://hexo.io/zh-cn/ 主页中有非常详细的介绍，这里主要说说主页中没有详细说明内容。 hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。其中的差别，有点意思。 hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。 源码结构 文件/文件夹 说明 _config.yml 配置文件 public 生成的静态文件，这个目录最终会发布到服务器 scaffolds 一些通用的markdown模板 source 编写的markdown文件，_drafts草稿文件，_posts发布的文章 themes 博客的模板 常用命令 初始化 $ hexo init 生成静态页面 $ hexo generate 或者hexo g 本地启动 $ hexo server 或者hexo s 本地启动服务，在浏览器中输入http://localhost:4000/查看生成的页面效果。 恭喜你，到此你成功了！ 更换主题 hexo自己默认的主题landscape，个人推荐主题yilia $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置文件 修改Blog/_config.yml文件： theme: yilia //默认为landscape 部署到github 部署之前先修改Blog/_config.yml文件。 deploy: ​ type: git ​ repository: https://github.com/bobit/bobit.github.io //bobit替换为你自己的用户名 ​ branch: master 然后使用以下命令进行部署。 123hexo cleanhexo generate 或者 hexo ghexo deploy 备注：如果执行上述命令报错，你可以试试下面这个命令再试。 $ npm install hexo-deployer-git --save Q2A Hexo中使用MathJax公式 安装插件 1npm install hexo-math --save 配置 1234567891011math: engine: &apos;mathjax&apos; # or &apos;katex&apos; mathjax: src: # &quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; config: # MathJax config katex: css: #custom_css_source js: #custom_js_source # not used config: # KaTeX config 由于有默认配置，所以src和config的内容为空。 文章中需要打开公式，文章的Front-matter里打开mathjax开关后成功激活： 1234567---title: Hexo中使用MathJax公式date: 2016-12-25 13:38:47tags: [Hexo,MathJax]categories: [Tools,Hexo]mathjax: true--- 存在问题 由于markdown中的下划线 _ 是表示斜体，MathJax中 _ 是表示下标，存在冲突| 解决这个问题： 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 文章链接唯一化 也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。 安装 1npm install hexo-abbrlink --save 在站点配置文件中查找代码permalink，将其更改为（“posts/” 与“.html”可自行更换）: 1permalink: posts/:abbrlink.html 这里有个知识点： 百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。 搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。 然后在站点配置文件中添加如下代码: 1234# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 可选择模式： crc16 &amp; hex crc16 &amp; dec crc32 &amp; hex crc32 &amp; dec 使用hexo generate命令，所有之前写的md会自动生成 abbrlink: 9406e9db 属性。 hexo+github上传图片到博客 查看_config.yml文件 查找 post_asset_folder 字段确定post_asset_folder 设置为true。当设置参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。 到博客的根目录下执行 npm install https://github.com/CodeFalling/hexo-asset-image --save 命令来进行插件的安装。 然后创建一文章 hexo new “test” 然后查看博客的 …/source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件 如果使用Typora，偏好设置需要把图片插入设置为复制到指定路径：./${filename} 如果使用了abbrlink，图片路径需要相应修改为abbrlink生成的值。 添加评论 使用gitalk 附录 命令 12345678hexo new [layout] &lt;title&gt;hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://bobit.github.io/tags/Hexo/"}]},{"title":"IDEA使用方法详解","slug":"Setting/IDEA","date":"2015-11-12T03:15:35.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/5dcde84c.html","link":"","permalink":"https://bobit.github.io/posts/5dcde84c.html","excerpt":"","text":"IntelliJ IDEA import and reimport a project 以下是import一个Maven project的时候需要进行的配置： (1)Keep projects files in: 通过这一个check box来指定“项目文件”在导入之后的location。 比如说，当你import一个project并希望将“.iml”文件和“.idea”文件夹导入到指定的文件夹中，而不是默认的位置。 默认地，IntellJ IDEA会将“项目文件”放在pom.xml的旁边。 (2)Import Maven projects automatically： 选择该项，如果你想要每次你修改你的pom.xml文件时，IntelliJ IDEA都会自动执行reimport。 (3)Create IntelliJ IDEA modules for aggregator projects (with ‘pom’ packaging)： 选择该项，在该“aggressive project”的pom.xml中的包含的每一个Maven Modules将会被创建。 (4)Create module groups for multi-module Maven projects: 选择该项，IntelliJ IDEA将会根据该aggressive Maven project创建一个module group，包含每个nested modules。 (5)Keep source and test folders on reimport： 1.选择该项,所有的“source”和“test”文件夹将会在每次import时被保存。 2.不选该项,所有之前配置的“source”和“test”文件夹将会在每次import的时候被remove掉。 默认地，该check box如下设置的： 1.对于new project：不选该项； 2.对于already imported projects：选择该项。 (6)Exclude build directory (PROJECT_ROOT/target): 选择该项，来从该项目中排出build目录。 这个可能会有用，如果你想要加速项目导入的进程。 不选该项，IntelliJ IDEA在每次你import一个project的时候，将会在build目录下的文件建立索引，这样的话有可能会有额外的时间开销。 (7)Use Maven output directories： 不选该项，build将会被创建在IntelliJ IDEA的默认output目录：USER_HOME\\IdeaProjects&lt;project&gt;\\classes\\Production\\； 选择该项，build被创建在Mavende output目录，而且，IntelliJ IDEA编译的结果被reused。 但是，IntelliJ IDEA本身不会reuse Maven build的结果，and，会重头编译。 (8)Generated sources folders: 当你reimport一个project的时候，指定你的source root的directory。 你可以选择这下面的一种选项： 1.Detect automatically： 这是默认选项。IntelliJ IDEA将自动的识别产生sources的位置。 IntelliJ IDEA也会识别标记为source root的路径。但是，IntelliJ IDEA只在target/generated-sources和target/generated-sources/*下搜索。 2.target/generated-sources：这个选项让你手动的标记source root。 3.subdirectories of “target/generated-sources”：这个选项让你手动的标记subdirectory为source root。 4.Don’t detect：这个选项让你跳过detection process。 (9)Phase to be used for folders update： 选择用来folder updat的Maven phase。这可能有用，如果你调整你的plugins，为了使额外的sources在某些阶段被load进来。 (10)Automatically download： 选择source、documenation，在一个opening Maven project中，这些将会被自动下载。 (11)Dependency types： 使用这个field来指定，当你reimport project时候的dependency types。 (12)Use Maven3 to import a project: Q2A terminal设置成Linux的终端一样 setting-&gt;Tools-&gt;terminal-&gt;你的路径\\Git\\bin\\bash.exe 解决IDEA下的terminal中文Unicode编码问题，在Git的安装目录下的etc目录下bash.bashrc文件，在最后一行添加： 123export LC_ALL=zh_CN.UTF-8 # 设置终端打开的编码alias ls=&apos;ls -F --color=auto --show-control-chars&apos; # 使用ls命令的时候加上颜色alias ll=&apos;ls -la -F --color=auto --show-control-chars&apos; # 使用ll命令的时候加上颜色 重启IDEA就可以了。 can’t start git:git.exe Settings – Version Control – Git Path to Git executable:C:\\DevTools\\PortableGit\\bin\\git.exe IntelliJ IDEA怎么删除Module idea,删除(实际上是移除)module之后,如何重新添加 idea，里面的删除，不是真的删除，只是移除，如果想要重新添加，操作过程ctrl+alt+shift+s,进入project structure，然后点击Modules，点击+号，选择import module，然后找到对应的module所在位置，添加进来。 此外还有一种简单的方式，但是忘记了，后面如果想起来再做补充 out存放的是该项目下所有Module(模块)的编译结果。 target存放的是单个Module的编译结果。 如果为某个Module指定了编译结果的路径，则不会再输出到out文件夹中了。 你在Project Structure中的Project选项卡中可以设置Project compiler output的目录。 在Modules中选择某一个模块后，在右侧的Paths选项卡中可以设置该模块的Compiler output目录。 Move Module to Group分组重启丢失 解决： Settings - Build,Execution,Deployment – Build Tools - Maven - Importing Create module groups for multi-module Maven projects 取消此项 Create module groups for multi-module Maven projects 选中无法创建分组的，显示多个模块项目。 Create IntelliJ IDEA modules for aggregator projects(with ‘pom’ packaging) 会移除父模块 上述两个都选中显示分组，分组下显示多个模块 IDEA工具将所有的class打包成jar文件，方法如下： 选择菜单File-&gt;Project Structure，将弹出Project Structure的设置对话框。 选择左边的Artifacts后点击上方的“+”按钮点击“+”，选择“Jar”，选择Empty或From modules with dependencies，后者会把在项目中用到的Jar包解压开，当成项目的一部分，打包到最后的Jar包中。但是这样会有一个问题，即，如果项目中引用的Jar包有签名过，最后打包成的Jar包运行时会抛出错误： “java.lang.SecurityException: Invalid signature file digest for Manifest main attributes”，因此，选择的是Empty，然后在“Output Layout”中，把自己要打包的文件、文件夹添加进去。对于外部引用的包，全部放在lib目录下，因此，在Class Path中，把依赖的jar包添加进去，例如：lib/javax.servlet-3.0.0.v201112011016.jar lib/jetty-all-9.1.5.v20140505.jar lib/json-simple-1.1.1.jar 设置好Main Class，这就不用多说了。点击OK。 回到IDEA，选择Build -&gt; Build Artifacts，成功生成Jar包。生成的Jar包位于上图设置的Output directory。 使用命令java -jar xxxxx.jar来执行jar包。 在弹出的框中选择jar-&gt;from moduls with dependencies… 选择要启动的类，然后 确定 应用之后选择菜单Build-&gt;Build Artifacts,选择Build或者Rebuild后即可生成，生成的jar文件位于工程项目目录的out/artifacts下。 IDEA工具指定jdk的Language level 在Java项目中必不可少的是我们要指定一个jdk。在指定jdk的同时，还可以指定jdk的Language level，这个有点像我们工程最低支持版本。比如Language level 设置了5.0 只是就不能出现使用6.0／7.0特性的代码。 因为这些特性在5.0的环境下是无法编译的。或者可以理解ide会安装Language level指定的jdk版本来对我们的代码进行编译，以及错误检查。 在IntelliJ中有两个地方设置这个参数。 针对整个工程，或者说是工程默认的。 针对模块的，这里才是正在生效的设置。 如果设置Use project language level 就是延用project的设置。 此处可以重新指定。project设置就失效。这个设置需要重新载入项目。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://bobit.github.io/categories/Tools/"}],"tags":[{"name":"IDEA","slug":"IDEA","permalink":"https://bobit.github.io/tags/IDEA/"}]},{"title":"Jsp 相关问题","slug":"Q2A/q2a-jsp","date":"2013-11-03T14:18:17.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/758b8848.html","link":"","permalink":"https://bobit.github.io/posts/758b8848.html","excerpt":"","text":"访问WEB-INF目录中的JSP文件 WEB-INF目录是不对外开放的，外部没办法直接访问到。所有只能通过映射来访问，比如映射为一个action或者servlet通过服务器端跳转来访问到具体的页面。这样可以限制访问，提高安全性。 方法1 本来WEB-INF中的jsp就是无法通过地址栏访问的.如果说你要访问这个文件夹中的jsp文件需要在项目的web.xml文件中去配置servlet格式差不多的配置就ok了。如下: 1234567&lt;servlet&gt;&lt;servlet-name&gt;runtain&lt;/servlet-name&gt;&lt;jsp-file&gt;/WEB-INF/INF.jsp&lt;/jsp-file&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;runtain&lt;/servlet-name&gt;&lt;url-pattern&gt;/XXX&lt;/url-pattern&gt; 访问地址:http://localhost:8080/runtain/xxx 就可以看见内容了! 方法2 &lt;jsp:forward page =&quot;/WEB-INF/jsp/test/test.jsp&quot; /&gt; 方法3 request.getRequestDispatcher(&quot;/WEB-INF/a.jsp&quot;).forward(request,response); 怎么样让servlet访问web-inf下的网页或jsp文件呢. 因为web-inf下,应用服务器把它指为禁访目录,即直接在浏览器里是不能访问到的. 因些,可以让servlet进行访问,如web-inf下有a.jsp则可以用request.getRequestDispatcher(&quot;/WEB-INF/a.jsp&quot;).forward(request,response);进行派遣访问.但如果web-inf下有a.htm,则用request.getRequestDispatcher(&quot;/WEB-INF/a.htm&quot;).forward(request,response);就不能访问. 一开始想不通,觉得怪.后来想想,jsp其实也是servlet,会自动编译的,于是work目录下会有/web-inf/ajsp.class类型,于是有头绪了,让应用服务器能够编译.htm,如ajsp.class类型,于是有头绪了,让应用服务器能够编译.htm,如ajsp.class类型,于是有头绪了,让应用服务器能够编译.htm,如ahtm.class.抱有这个想法,开始动手 在tomcat下的conf/web,找到jsp的访问方式, 1234&lt;servlet-mapping&gt; &lt;servlet-name&gt;jsp&lt;/servlet-name&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 于是在下面添加 12345678&lt;servlet-mapping&gt; &lt;servlet-name&gt;jsp&lt;/servlet-name&gt; &lt;url-pattern&gt;*.htm&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;jsp&lt;/servlet-name&gt; &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 结果:一切OK,访问a.htm,和a.html在work/web-inf/下者有ahtm.class,ahtm.class,ahtm.class,ahtml.class生成","categories":[{"name":"Q2A","slug":"Q2A","permalink":"https://bobit.github.io/categories/Q2A/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"https://bobit.github.io/tags/jsp/"}]},{"title":"Windows环境变量设置备份","slug":"Setting/Path","date":"2012-08-28T03:22:30.000Z","updated":"2019-08-30T02:02:24.062Z","comments":true,"path":"posts/1c0a846d.html","link":"","permalink":"https://bobit.github.io/posts/1c0a846d.html","excerpt":"","text":"path java node","categories":[],"tags":[]}]}